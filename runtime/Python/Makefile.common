# -*- mode: Makefile -*-

PYTHON?=python2.5

LIB=$(BASE)/..
SRC=$(BASE)/../../src
CLASSPATH=$(LIB)/antlr-2.7.7.jar:$(LIB)/junit-4.2.jar:$(LIB)/stringtemplate-3.0.jar

ANTLR3VER=3.0b7

JAVAC=javac -classpath $(CLASSPATH)
JAVA=java

ANTLR=$(JAVA) -classpath $(CLASSPATH):$(SRC) org.antlr.Tool
ANTLR2=$(JAVA) -classpath $(LIB)/antlr-2.7.7.jar antlr.Tool


$(SRC)/org/antlr/tool/ANTLRParser.java: $(SRC)/org/antlr/tool/antlr.g
	cd $(dir $<); $(ANTLR2) $<

$(SRC)/org/antlr/tool/AssignTokenTypesWalkerTokenTypes.java: $(SRC)/org/antlr/tool/assign.types.g
	cd $(dir $<); $(ANTLR2) $<

$(SRC)/org/antlr/tool/DefineGrammarItemsWalker.java: $(SRC)/org/antlr/tool/define.g
	cd $(dir $<); $(ANTLR2) $<

$(SRC)/org/antlr/tool/TreeToNFAConverter.java: $(SRC)/org/antlr/tool/buildnfa.g
	cd $(dir $<); $(ANTLR2) $<

$(SRC)/org/antlr/tool/ANTLRTreePrinter.java: $(SRC)/org/antlr/tool/antlr.print.g
	cd $(dir $<); $(ANTLR2) $<

$(SRC)/org/antlr/codegen/CodeGenTreeWalker.java: $(SRC)/org/antlr/codegen/ANTLRTokenTypes.txt

$(SRC)/org/antlr/codegen/ANTLRTokenTypes.txt: $(SRC)/org/antlr/tool/ANTLRParser.java

$(SRC)/org/antlr/codegen/CodeGenTreeWalker.java: $(SRC)/org/antlr/codegen/codegen.g 

	cd $(dir $<); $(ANTLR2) $<



.PHONY:
generate:
	cd $(SRC)/org/antlr/tool/; $(ANTLR2) antlr.g
	cd $(SRC)/org/antlr/tool/; $(ANTLR2) antlr.print.g
	cd $(SRC)/org/antlr/tool/; $(ANTLR2) assign.types.g
	cd $(SRC)/org/antlr/tool/; $(ANTLR2) define.g
	cd $(SRC)/org/antlr/tool/; $(ANTLR2) buildnfa.g
	cp $(SRC)/org/antlr/tool/ANTLRTokenTypes.txt $(SRC)/org/antlr/codegen/ANTLRTokenTypes.txt
	cd $(SRC)/org/antlr/codegen/; $(ANTLR2) codegen.g

.PHONY: build
build:
	cd $(SRC); $(JAVAC) -d . org/antlr/Tool.java org/antlr/*/*.java org/antlr/*/*/*.java
	touch $(SRC)/build-stamp

.PHONY: rebuild
rebuild: generate build


lint%: %.py
	PYTHONPATH=$(BASE) pylint --rcfile=$(BASE)/pylintrc --output-format=parseable $<
