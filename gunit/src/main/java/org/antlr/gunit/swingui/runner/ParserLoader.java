package org.antlr.gunit.swingui.runner;

import java.io.*;
import java.util.HashMap;

/**
 * Class loader for parser & lexer generated by antlr.
 * @author Shaoting
 */
public class ParserLoader extends ClassLoader {

    private HashMap<String, Class> classList;
    private String grammar;

    /**
     * Create a class loader for antlr parser/lexer.
     * @param grammarName
     * @param classDir
     */
    public ParserLoader(String grammarName, String classDir) throws IOException {

        // load all the classes in the "classDir" related to the grammarName
        File dir = new File(classDir);
        if(dir.isDirectory()) {
            classList = new HashMap<String, Class>();
            grammar = grammarName;
            File[] files = dir.listFiles(new ClassFilenameFilter(grammarName));
            for(File f : files) {

                // load class data
                final InputStream in = new BufferedInputStream(new FileInputStream(f));
                final byte[] classData = new byte[in.available()];
                in.read(classData);
                in.close();

                // define class
                final Class newClass = defineClass(null, classData, 0, classData.length);
                assert(newClass != null);
                resolveClass(newClass);

                // save to hashtable
                final String fileName = f.getName();
                final String className = fileName.substring(0, fileName.lastIndexOf("."));
                classList.put(className, newClass);
                //System.out.println("adding: " + className);
            }
        } else {
            throw new IOException(classDir + " is not a directory.");
        }

    }



    @Override
    public synchronized Class loadClass(String name, boolean resolve) throws ClassNotFoundException {
        //System.out.print("loading: " + name);
        if(name.startsWith(grammar)) {
            if(classList.containsKey(name)) {
                //System.out.println(" .... found");
                return classList.get(name);
            } else {
                //System.out.println(" .... not found");
                throw new ClassNotFoundException(name);
            }
            
        } else {
            final Class c = findSystemClass(name);
            //System.out.println(" .... system found " + c.getName());
            return c;
        }
    }

    /**
     * Accepts grammarname...($...)?.class
     */
    protected static class ClassFilenameFilter implements FilenameFilter {

        private String grammarName;

        protected ClassFilenameFilter(String name) {
            grammarName = name;
        }

        public boolean accept(File dir, String name) {
            return name.startsWith(grammarName) && name.endsWith(".class");
        }

    }

}
