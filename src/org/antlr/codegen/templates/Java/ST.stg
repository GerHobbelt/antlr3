/*
 [The "BSD licence"]
 Copyright (c) 2005 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/** Template subgroup to add template rewrite output
 *  If debugging, then you'll also get STDbg.stg loaded.
 */
group ST;

@outputFile.imports() ::= <<
<@super.imports()>
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
>>

@genericParser.ruleReturnMembers() ::= <<
public StringTemplate template;
>>

@genericParser.members() ::= <<
<@super.members()>
/** Convert a List\<RuleReturn> to List\<StringTemplate> by copying
 *  out the .template property.  Useful when converting from
 *  list labels to template attributes:
 *
 *    a : ids+=ID -> foo(ids={toTemplates($ids)})
 *      ;
 */
public List toTemplates(List retvals) {
  if ( retvals==null ) return null;
  List strings = new ArrayList(retvals.size());
  for (int i=0; i\<retvals.size(); i++) {
    strings.add(((RuleReturn)retvals.get(i)).template);
  }
  return strings;
}

protected StringTemplateGroup templateLib =
  new StringTemplateGroup("<name>Templates", AngleBracketTemplateLexer.class);

public void setTemplateLib(StringTemplateGroup templateLib) {
  this.templateLib = templateLib;
}
public StringTemplateGroup getTemplateLib() {
  return templateLib;
}
>>

rewriteTemplate(alts) ::= <<

// TEMPLATE REWRITE
<alts:rewriteTemplateAlt(); separator="else ">
>>

rewriteTemplateAlt() ::= <<
// <it.description>
<if(it.pred)>
if (<it.pred>) {
    <it.alt>
}<\n>
<else>
{
    <it.alt>
}<\n>
<endif>
>>

rewriteEmptyTemplate(alts) ::= <<
retval.template = null;
>>

/** Invoke a template with a set of attribute name/value pairs */
rewriteExternalTemplate(name,args) ::= <<
retval.template = templateLib.getInstanceOf("<name>");
<args:{a | retval.template.setAttribute("<a.name>", <a.value>);<\n>}>
>>

/** Invoke an inline template with a set of attribute name/value pairs */
rewriteInlineTemplate(args, template) ::= <<
retval.template = new StringTemplate(templateLib, "<template>");
<args:{a | retval.template.setAttribute("<a.name>", <a.value>);<\n>}>
>>

/** plain -> {foo} action */
rewriteAction(action) ::= <<
retval.template = <action>;<\n>
>>
