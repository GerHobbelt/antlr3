group Java_dfa;

dfaDecision(decisionNumber,description) ::=
  "alt<decisionNumber> = DFA.DFA<decisionNumber>(input);"

allCyclicDFAs(DFAs) ::= <<
<DFAs>
>>

cyclicDFA(decision,states,description) ::= <<
.method DFA<decision> (LIntegerStream;)I
    aload 0
    iconst 1
    invokeinterface IntegerStream.LA 2
    istore 1
    goto s0
<states>
>>

cyclicDFAState(stateNumber,edges,needErrorClause) ::= <<
s<stateNumber>:
<edges>
<if(needErrorClause)>
    goto errorState
    return 0;
<endif>
>>

cyclicDFAAcceptState(stateNumber,predictAlt) ::= <<
s<stateNumber>:
    iconst <predictAlt>
    ireturn
>>

cyclicDFAEdge(labelExpr, targetStateNumber, edgeNumber) ::= <<
s<stateNumber>e<edgeNumber>:
<labelExpr>
s<stateNumber>e<edgeNumber>_go:
    aload 0
    invokeinterface IntegerStream.consume() 1
    goto s<targetStateNumber>
s<stateNumber>e<edgeNumber>_skip:
>>

eotDFAEdge(targetStateNumber) ::= <<
    goto s<targetStateNumber>
>>

// D F A  E X P R E S S I O N S

andPredicates(left,right) ::= "(<left>&&<right>)"

orPredicates(left,right) ::= "(<left>||<right>)"

notPredicate(pred) ::= "!(<pred>)"

lookaheadTest(atom,k,atomAsInt) ::= <<
    iload 1
    iconst <atomAsInt>
    if_icmpne s<stateNumber>e<edgeNumber>_skip
>>

lookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= <<
;	(i>=<lowerAsInt> && i\<=<upperAsInt>)
    iload 1
    iconst <lowerAsInt>
    if_icmplt s<stateNumber>r<rangeNumber>_false
    iload 1
    iconst <upperAsInt>
    if_icmpgt s<stateNumber>r<rangeNumber>_false
    goto s<stateNumber>e<edgeNumber>_transition
s<stateNumber>r<rangeNumber>_false:
>>

setTest(ranges) ::= <<
<ranges>
    goto s<stateNumber>e<edgeNumber>_skip
>>
