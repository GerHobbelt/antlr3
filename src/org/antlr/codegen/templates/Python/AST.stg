/*
 [The "BSD licence"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
group AST;

finishedBacktracking(block) ::= <<
<if(backtracking)>
if self.backtracking == 0:
    FIXME(3)
    <block>
<else>
<block>
<endif>
>>

stillBacktracking(block) ::= <<
<if(backtracking)>
if self.backtracking > 0:
    FIXME(5)
    <block>
<else>
<block>
<endif>
>>

@outputFile.imports() ::= <<
<@super.imports()>
<if(!TREE_PARSER)><! tree parser would already have imported !>
import antlr3.tree<\n>
<endif>
>>

@genericParser.members() ::= <<
<@super.members()>
<parserMembers()>
>>

/** Add an adaptor property that knows how to build trees */
parserMembers() ::= <<
self.adaptor = antlr3.tree.CommonTreeAdaptor()<\n>
>>

@returnScope.ruleReturnMembers() ::= <<
self.tree = None
>>


/** Add a variable to track rule's return AST */
ruleDeclarations() ::= <<
<super.ruleDeclarations()>
root_0 = None<\n>
>>

ruleLabelDefs() ::= <<
<super.ruleLabelDefs()>
<ruleDescriptor.tokenLabels:{<it.label.text>_tree = None}; separator="\n">
<ruleDescriptor.tokenListLabels:{<it.label.text>_tree = None}; separator="\n">
>>

ruleCleanUp() ::= <<
<super.ruleCleanUp()>
<if(ruleDescriptor.hasMultipleReturnValues)>
<finishedBacktracking({
retval.tree = self.adaptor.rulePostProcessing(root_0)
self.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop)})>
<endif>
>>

/** When doing auto AST construction, we must define some variables;
 *  These should be turned off if doing rewrites.  This must be a "mode"
 *  as a rule could have both rewrite and AST within the same alternative
 *  block.
 */
@alt.declarations() ::= <<
<if(autoAST)>
<if(outerAlt)>
root_0 = self.adaptor.nil()<\n>
<else>
<endif>
<endif>
>>


// TOKEN AST STUFF

/** ID and output=AST */
tokenRef(token,label,elementIndex) ::= <<
<super.tokenRef(...)>

<label>_tree = self.adaptor.create(<label>)
self.adaptor.addChild(root_0, <label>_tree)<\n>
>>

/** ID! and output=AST (same as plain tokenRef) */
tokenRefBang(token,label,elementIndex) ::= "<super.tokenRef(...)>"

/** ID^ and output=AST */
tokenRefRuleRoot(token,label,elementIndex) ::= <<
<super.tokenRef(...)>
<finishedBacktracking({
<label>_tree = self.adaptor.create(<label>)
root_0 = self.adaptor.becomeRoot(<label>_tree, root_0)})>
>>

/** ids+=ID! and output=AST */
tokenRefBangAndListLabel(token,label,elementIndex) ::= <<
<tokenRefBang(...)>
<listLabel(...)>
>>

/** label+=TOKEN when output=AST but not rewrite alt */
tokenRefAndListLabel(token,label,elementIndex) ::= <<
<tokenRef(...)>
<listLabel(...)>
>>

/** Match label+=TOKEN^ when output=AST but not rewrite alt */
tokenRefRuleRootAndListLabel(token,label,elementIndex) ::= <<
<tokenRefRuleRoot(...)>
<listLabel(...)>
>>

/** ID but track it for use in a rewrite rule */
tokenRefTrack(token,label,elementIndex) ::= <<
<super.tokenRef(...)>
<finishedBacktracking({list_<token>.append(<label>)})>
>>

/** ids+=ID and track it for use in a rewrite rule; adds to ids *and*
 *  to the tracking list list_ID for use in the rewrite.
 */
tokenRefTrackAndListLabel(token,label,elementIndex) ::= <<
<tokenRefTrack(...)>
<listLabel(...)>
>>

// SET AST

// the match set stuff is interesting in that it uses an argument list
// to pass code to the default matchSet; another possible way to alter
// inherited code.  I don't use the region stuff because I need to pass
// different chunks depending on the operator.  I don't like making
// the template name have the operator as the number of templates gets
// large but this is the most flexible--this is as opposed to having
// the code generator call matchSet then add root code or ruleroot code
// plus list label plus ...  The combinations might require complicated
// rather than just added on code.  Investigate that refactoring when
// I have more time.

matchSet(s,label,elementIndex,postmatchCode) ::= <<
<super.matchSet(..., postmatchCode={<stillBacktracking({self.adaptor.addChild(root_0, self.adaptor.create(<label>))})>})>
>>

matchSetBang(s,label,elementIndex,postmatchCode) ::= "<super.matchSet(...)>"

matchSetRoot(s,label,elementIndex,debug) ::= <<
<super.matchSet(..., postmatchCode={<stillBacktracking({FIXME(39)root_<blockLevel> = self.adaptor.becomeRoot(self.adaptor.create(<label>), root_<blockLevel>)})>})>
>>

matchSetRuleRoot(s,label,elementIndex,debug) ::= <<
<super.matchSet(..., postmatchCode={<stillBacktracking({FIXME(40)root_0 = self.adaptor.becomeRoot(self.adaptor.create(<label>), root_0)})>})>
>>

// RULE REF AST

/** rule when output=AST */
ruleRef(rule,label,elementIndex,args) ::= <<
<super.ruleRef(...)>
<finishedBacktracking({self.adaptor.addChild(root_0, <label>.tree)})>
>>

/** rule! is same as normal rule ref */
ruleRefBang(rule,label,elementIndex,args) ::= "<super.ruleRef(...)>"

/** rule^ */
ruleRefRuleRoot(rule,label,elementIndex,args) ::= <<
<super.ruleRef(...)>
<finishedBacktracking({root_0 = self.adaptor.becomeRoot(<label>.tree, root_0)})>
>>

/** rule when output=AST and tracking for rewrite */
ruleRefTrack(rule,label,elementIndex,args) ::= <<
<super.ruleRef(...)>
<finishedBacktracking({list_<rule>.append(<label>.tree)})>
>>

/** x+=rule when output=AST and tracking for rewrite */
ruleRefTrackAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRefTrack(...)>
<listLabel(...)>
>>

/** x+=rule when output=AST */
ruleRefAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRef(...)>
<listLabel(...)>
>>

/** x+=rule! when output=AST is a rule ref with list addition */
ruleRefBangAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRefBang(...)>
<listLabel(...)>
>>

/** x+=rule^ */
ruleRefRuleRootAndListLabel(rule,label,elementIndex,args) ::= <<
<ruleRefRuleRoot(...)>
<listLabel(...)>
>>

// WILDCARD AST
wildcard(label,elementIndex) ::= <<
<super.wildcard(...)>
<finishedBacktracking({
<label>_tree = self.adaptor.create(<label>)
self.adaptor.addChild(root_0, <label>_tree)})>
>>

wildcardBang(label,elementIndex) ::= "<super.wildcard(...)>"

wildcardRuleRoot(label,elementIndex) ::= <<
<super.wildcard(...)>
<finishedBacktracking({
<label>_tree = self.adaptor.create(<label>)
root_0 = self.adaptor.becomeRoot(<label>_tree, root_0)})>
>>

// TODO: ugh, am i really missing the combinations for Track and ListLabel?
// there's got to be a better way

// R e w r i t e

rewriteCode(
	alts, description,
	referencedTokens,
	referencedListLabels,
	referencedRules,
	referencedTokenLabels,
	referencedRuleLabels,
	rewriteBlockLevel, enclosingTreeLevel, treeLevel) ::=
<<
# AST Rewrite
<finishedBacktracking({
i_0 = 0
<prevRuleRootRef()>.tree = root_0
root_0 = self.adaptor.nil()
<first(alts):rewriteAltFirst(); anchor>

<rest(alts):{a | el<rewriteAltRest(a)>}; anchor, separator="\n\n">})>
>>

rewriteOptionalBlock(
	alt,rewriteBlockLevel,
	referencedTokens,
	referencedListLabels,
	referencedRules,
	referencedTokenLabels,
	referencedRuleLabels,
	description) ::=
<<
# <fileName>:<description>
<rewriteBlockCardinalityCheck()>
if n_<rewriteBlockLevel> > 1:
    raise RuntimeError("<first([referencedTokens,referencedListLabels,referencedRules])> list has > 1 elements")

if n_<rewriteBlockLevel> == 1:
    i_<rewriteBlockLevel> = 0
    <alt>

>>

rewriteClosureBlock(
	alt,rewriteBlockLevel,
	referencedTokens,
	referencedListLabels,
	referencedRules,
	referencedTokenLabels,
	referencedRuleLabels,
	description) ::=
<<
# <fileName>:<description>
<rewriteBlockCardinalityCheck()>
for i_<rewriteBlockLevel> in range(n_<rewriteBlockLevel>):
    <alt>

>>

rewritePositiveClosureBlock(
	alt,rewriteBlockLevel,
	referencedTokens,
	referencedListLabels,
	referencedRules,
	referencedTokenLabels,
	referencedRuleLabels,
	description) ::=
<<
# <fileName>:<description>
<rewriteBlockCardinalityCheck()>
if n_<rewriteBlockLevel> == 0:
    raise RuntimeError("Must have more than one element for (...)+ loops")

for i_<rewriteBlockLevel> in range(n_<rewriteBlockLevel>):
    <alt>

>>

/** Elements referenced in rewrite loops/optional blocks must have
 *  the same size.  Factor this out from rewriteXXXBlock rules.  This
 *  deals both with the lists of stuff and single element labels like id=ID.
 *  The n_xxx var is always defined to either first list_ var or single-value
 *  label.
 */
rewriteBlockCardinalityCheck() ::= <<
<! First compute size of lists of stuff !>
<first([referencedTokens,referencedListLabels,referencedRules]):{
if list_<first([referencedTokens,referencedListLabels,referencedRules])> is None:
    n_<rewriteBlockLevel> = 0
else:
    n_<rewriteBlockLevel> = len(list_<first([referencedTokens,referencedListLabels,referencedRules])>)

}>
<! Check cardinality against first size !>
<rest([referencedTokens,referencedListLabels,referencedRules]):{
if len(list_<it>) != n_<rewriteBlockLevel>:
    raise RuntimeError("rewrite element <it> list differs in size from other elements");<\n>

}>
<!
   Now generate checks for non-list labels
!>
<!
   If no lists above, then we need to define n to be 0 or 1 depending on presence
   of single-value labels
!>
<if(!first([referencedTokens,referencedListLabels,referencedRules]))>
FIXME(74)
<first([referencedTokenLabels,referencedRuleLabels]):{label |
FIXME(75)n_<rewriteBlockLevel> = <first([referencedTokenLabels,referencedRuleLabels])>==null ? 0 : 1;
}>
<! Now, gen checks to ensure non-list labels match cardinality of other labels !>
<rest([referencedTokenLabels,referencedRuleLabels]):{label|
FIXME(76)if ( (<label>==null && n_<rewriteBlockLevel>\>0) || (<label>!=null && n_<rewriteBlockLevel>==0) ) raise RuntimeException("rewrite element <label> list differs in size from other elements");
}>

<else> <! there were some list labels !>
<! Now, gen checks to ensure non-list labels match cardinality of lists !>
<[referencedTokenLabels,referencedRuleLabels]:{label|
if (<label> is None and n_<rewriteBlockLevel> \> 0) or (<label> is not None and n_<rewriteBlockLevel> == 0):
    raise RuntimeError("rewrite element <label> list differs in size from other elements")
}>
<endif>
>>

rewriteAltRest(a) ::= <<
<if(a.pred)>
if <a.pred>:
    # <a.description>
    <a.alt>
<else>
se: <! little hack to get if .. elif .. else block right !>
    # <a.description>
    <a.alt>
<endif>
>>

rewriteAltFirst(a) ::= <<
<if(a.pred)>
if <a.pred>:
    # <a.description>
    <a.alt>
<else>
# <a.description>
<a.alt>
<endif>
>>

/** For empty rewrites: "r : ... -> ;" */
rewriteEmptyAlt() ::= "root_0 = self.adaptor.nil()"

rewriteTree(root,children,description,enclosingTreeLevel,treeLevel) ::= <<
# <fileName>:<description>
root_<treeLevel> = self.adaptor.nil()
<root:rewriteElement()>
<children:rewriteElement()>
self.adaptor.addChild(root_<enclosingTreeLevel>, root_<treeLevel>)<\n>
>>

rewriteElementList(elements) ::= "<elements:rewriteElement()>"

rewriteElement(e) ::= <<
<@pregen()>
<e.el>
>>

/** Gen ID */
rewriteTokenRef(token,elementIndex) ::= <<
self.adaptor.addChild(root_<treeLevel>, list_<token>[i_<rewriteBlockLevel>])<\n>
>>

/** Gen $label ... where defined via label=ID */
rewriteTokenLabelRef(label,elementIndex) ::= <<
self.adaptor.addChild(root_<treeLevel>, <label>)<\n>
>>

/** Gen $label ... where defined via label+=ID */
rewriteTokenListLabelRef(label,elementIndex) ::= <<
self.adaptor.addChild(root_<treeLevel>, list_<label>[i_<rewriteBlockLevel>])<\n>
>>

/** Gen ^($label ...) */
rewriteTokenLabelRefRoot(label,elementIndex) ::= <<
root_<treeLevel> = self.adaptor.becomeRoot(<label>, root_<treeLevel>);<\n>
>>

/** Gen ^(ID ...) */
rewriteTokenRefRoot(token,elementIndex) ::= <<
root_<treeLevel> = self.adaptor.becomeRoot(list_<token>[i_<rewriteBlockLevel>], root_<treeLevel>);<\n>
>>

rewriteImaginaryTokenRef(args,token,elementIndex) ::= <<
self.adaptor.addChild(root_<treeLevel>, self.adaptor.createToken(tokenType=<token>, <args:{a | fromToken=<a>},{a | text=<a>}; separator=", "><if(!args)>text="<token>"<endif>))<\n>
>>

rewriteImaginaryTokenRefRoot(args,token,elementIndex) ::= <<
root_<treeLevel> = self.adaptor.becomeRoot(self.adaptor.createToken(tokenType=<token>, <args:{a | fromToken=<a>},{a | text=<a>}; separator=", "><if(!args)>text="<token>"<endif>), root_<treeLevel>)<\n>
>>

/** plain -> {foo} action */
rewriteAction(action) ::= <<
FIXME(96)
root_0 = <action><\n>
>>

/** What is the name of the previous value of this rule's root tree?  This
 *  let's us refer to $rule to mean previous value.  I am reusing the
 *  variable 'tree' sitting in retval struct to hold the value of root_0 right
 *  before I set it during rewrites.  The assign will be to retval.tree.
 */
prevRuleRootRef() ::= "retval"

rewriteRuleRef(rule,dup) ::= <<
<if(dup)>
FIXME(99)
self.adaptor.addChild(root_<treeLevel>, self.adaptor.dupTree(list_<rule>[i_<rewriteBlockLevel>]))<\n>
<else>
self.adaptor.addChild(root_<treeLevel>, list_<rule>[i_<rewriteBlockLevel>])<\n>
<endif>
>>

rewriteRuleRefRoot(rule,dup) ::= <<
<if(dup)>
FIXME(102)
root_<treeLevel> = self.adaptor.becomeRoot(adaptor.dupTree(list_<rule>[i_<rewriteBlockLevel>]), root_<treeLevel>)<\n>
<else>
root_<treeLevel> = self.adaptor.becomeRoot(list_<rule>[i_<rewriteBlockLevel>], root_<treeLevel>)<\n>
<endif>
>>

rewriteNodeAction(action) ::= <<
self.adaptor.addChild(root_<treeLevel>, <action>)<\n>
>>

rewriteNodeActionRoot(action) ::= <<
root_<treeLevel> = self.adaptor.becomeRoot(<action>, root_<treeLevel>)<\n>
>>

/** Gen $ruleLabel ... where defined via ruleLabel=rule */
rewriteRuleLabelRef(label) ::= <<
self.adaptor.addChild(root_<treeLevel>, <label>.tree)<\n>
>>

/** Gen $ruleLabel ... where defined via ruleLabel+=rule */
rewriteRuleListLabelRef(label) ::= <<
self.adaptor.addChild(root_<treeLevel>, list_<label>[i_<rewriteBlockLevel>].tree)<\n>
>>

/** Gen ^($ruleLabel ...) where ruleLabel=rule */
rewriteRuleLabelRefRoot(label) ::= <<
root_<treeLevel> = self.adaptor.becomeRoot(<label>.tree, root_<treeLevel>)<\n>
>>

/** Gen ^($ruleLabel ...) where ruleLabel+=rule */
rewriteRuleListLabelRefRoot(label) ::= <<
root_<treeLevel> = self.adaptor.becomeRoot(list_<label>[i_<rewriteBlockLevel>].tree, root_<treeLevel>)<\n>
>>
