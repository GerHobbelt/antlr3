/*
 [The "BSD licence"]
 Copyright (c) 2005-2006 Terence Parr
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
group Python implements ANTLRCore;

javaTypeInitMap ::= [
        "int":"0",
        "long":"0",
        "float":"0.0",
        "double":"0.0",
        "boolean":"false",
        "byte":"0",
        "short":"0",
        "char":"0",
        default:"null" // anything other than an atomic type
]

/** The overall file structure of a recognizer; stores methods for rules
 *  and cyclic DFAs plus support code.
 */
outputFile(LEXER,PARSER,TREE_PARSER, actionScope, actions,
           docComment, recognizer,
           name, tokens, tokenNames, rules, cyclicDFAs,
           bitsets, buildTemplate, buildAST, rewrite, profile,
           backtracking, synpreds, memoize, numRules,
           fileName, ANTLRVersion, generatedTimestamp, trace,
           scopes, superClass, literals) ::=
<<
# $ANTLR <ANTLRVersion> <fileName> <generatedTimestamp>

<@imports>
import antlr3

try:
    set = set
    frozenset = frozenset
except NameError:
    # for pre-2.4 compatibility
    from sets import Set as set, ImmutableSet as frozenset

<if(TREE_PARSER)>
raise NotImplementedError("TREE_PARSER")
#import org.antlr.runtime.tree.*;
<endif>
<@end>

<actions.(actionScope).header>

<! <docComment> !>

# for convenience in actions
HIDDEN = antlr3.BaseRecognizer.HIDDEN

# token types
<tokens:{<it.name>=<it.type>}; separator="\n">

<recognizer>
>>

lexer(grammar, name, tokens, scopes, rules, numRules, labelType="Token",
      filterMode) ::= <<
class <name>(antlr3.Lexer):
    <scopes:{<if(it.isDynamicGlobalScope)><globalAttributeScope(scope=it)><endif>}>

    grammarFileName = "<fileName>"

    def __init__(self, input=None):
        antlr3.Lexer.__init__(self, input)
<if(backtracking)>
        #raise NotImplementedError("lexer: backtracking")
        #ruleMemo = new HashMap[<numRules>+1];<\n> <! index from 1..n !>
<endif>

        <cyclicDFAs:{dfa | <cyclicDFAInit(dfa)>}; seperator="\n">

	<actions.lexer.init>


    <actions.lexer.members>


<if(filterMode)>
    <filteringNextToken()>
<endif>
    <rules; separator="\n\n">

    <synpreds:{p | <lexerSynpred(p)>}>

    <cyclicDFAs:cyclicDFA()> <! dump tables for all DFA !>


>>

/** A override of Lexer.nextToken() that backtracks over mTokens() looking
 *  for matches.  No error can be generated upon error; just rewind, consume
 *  a token and then try again.  backtracking needs to be set as well.
 *  Make rule memoization happen only at levels above 1 as we start mTokens
 *  at backtracking==1.
 */
filteringNextToken() ::= <<
def nextToken(self):
    while True:
        if self.input.LA(1) == antlr3.EOF:
            return antlr3.EOF_TOKEN

        self.token = None
        self.tokenStartCharIndex = self.getCharIndex()
        self.text = None
        try:
            m = self.input.mark()
            self.backtracking = 1 <! means we won't throw slow exception !>
            self.failed = False
            self.mTokens()
            self.backtracking = 0

            <! mTokens backtracks with synpred at backtracking==2
               and we set the synpredgate to allow actions at level 1. !>
            if self.failed:
                self.input.rewind(m)
                self.input.consume() <! advance one char and try again !>

            else:
                return self.token

        except antlr3.RecognitionException, re:
            # shouldn't happen in backtracking mode, but...
            self.reportError(re)
            self.recover(re)


def memoize(self, input, ruleIndex, ruleStartIndex):
    if self.backtracking > 1:
        # is antlr3.Lexer always superclass?
        antlr3.Lexer.memoize(self, input, ruleIndex, ruleStartIndex)


def alreadyParsedRule(self, input, ruleIndex):
    if self.backtracking > 1:
        return antlr3.Lexer.alreadyParsedRule(self, input, ruleIndex)
    return False


>>

filteringActionGate() ::= "self.backtracking == 1"

/** How to generate a parser */

genericParser(grammar, name, scopes, tokens, tokenNames, rules, numRules,
              bitsets, inputStreamType, superClass,
              ASTLabelType="Object", labelType, members) ::= <<
# token names
tokenNames = [
    "\<invalid>", "\<EOR>", "\<DOWN>", "\<UP>", 
    <tokenNames; wrap, separator=", ">
]

<scopes:{<if(it.isDynamicGlobalScope)><globalAttributeScopeClass(scope=it)><endif>}>

<rules:{<ruleAttributeScopeClass(scope=it.ruleDescriptor.ruleScope)>}>

class <name>(antlr3.<superClass>):
    grammarFileName = "<fileName>"
    tokenNames = tokenNames

    def __init__(self, input):
        antlr3.<superClass>.__init__(self, input)
<if(backtracking)>
        raise NotImplementedError("genericParser: backtracking")
        ruleMemo = new HashMap[<numRules>+1];<\n> <! index from 1..n !>
<endif>

        <cyclicDFAs:{dfa | <cyclicDFAInit(dfa)>}; seperator="\n">

        <scopes:{<if(it.isDynamicGlobalScope)><globalAttributeScopeStack(scope=it)><endif>}>
	<rules:{<ruleAttributeScopeStack(scope=it.ruleDescriptor.ruleScope)>}>

        <actions.parser.init>


    <members>

    <rules; separator="\n\n">

    <synpreds:{p | <synpred(p)>}>

    <cyclicDFAs:cyclicDFA()> <! dump tables for all DFA !>

    <bitsets:{FOLLOW_<it.name>_in_<it.inName><it.tokenIndex> = frozenset([<it.tokenTypes:{<it>};separator=", ">])<\n>}>

>>

parser(grammar, name, scopes, tokens, tokenNames, rules, numRules, bitsets, ASTLabelType, superClass="Parser", labelType="Token", members={<actions.parser.members>}) ::= <<
<genericParser(inputStreamType="TokenStream", ...)>
>>

/** How to generate a tree parser; same as parser except the input
 *  stream is a different type.
 */
treeParser(grammar, name, scopes, tokens, tokenNames, globalAction, rules, numRules, bitsets, labelType={<ASTLabelType>}, ASTLabelType="Object", superClass="TreeParser", members={<actions.treeparser.members>}) ::= <<
<genericParser(inputStreamType="TreeNodeStream", ...)>
>>

/** A simpler version of a rule template that is specific to the imaginary
 *  rules created for syntactic predicates.  As they never have return values
 *  nor parameters etc..., just give simplest possible method.  Don't do
 *  any of the normal memoization stuff in here either; it's a waste.
 *  As predicates cannot be inlined into the invoking rule, they need to
 *  be in a rule by themselves.
 */
synpredRule(ruleName, ruleDescriptor, block, description, nakedBlock) ::=
<<
# $ANTLR start <ruleName>
def <ruleName>_fragment(self, <ruleDescriptor.parameterScope:parameterScope(scope=it)>):
<if(trace)>
    raise NotImplementedError("synpredRule: trace")
#    traceIn("<ruleName>_fragment", <ruleDescriptor.index>);
#    try {
#        <block>
#    }
#    finally {
#        traceOut("<ruleName>_fragment", <ruleDescriptor.index>);
#    }
<else>
    <block>
<endif>
# $ANTLR end <ruleName>


>>

synpred(name) ::= <<
def <name>(self):
    self.backtracking += 1
    <@start()>
    start = self.input.mark()
    self.<name>_fragment()
    success = not self.failed
    self.input.rewind(start)
    <@stop()>
    self.backtracking -= 1
    self.failed = False
    return success


>>

lexerSynpred(name) ::= <<
<synpred(name)>
>>

ruleMemoization(name) ::= <<
<if(memoize)>
raise NotImplementedError("ruleMemoization: memoize")
if ( backtracking>0 && alreadyParsedRule(input, <ruleDescriptor.index>) ) { return <ruleReturnValue()>; }
<endif>
>>

/** How to test for failure and return from rule */
checkRuleBacktrackFailure() ::= <<
<if(backtracking)>
if self.failed:
    return <ruleReturnValue()>
<endif>
>>

/** This rule has failed, exit indicating failure during backtrack */
ruleBacktrackFailure() ::= <<
<if(backtracking)>
if self.backtracking > 0:
    self.failed = True
    return <ruleReturnValue()><\n>
<endif>
>>

/** How to generate code for a rule.  This includes any return type
 *  data aggregates required for multiple return values.
 */
rule(ruleName,ruleDescriptor,block,emptyRule,description,exceptions,finally,memoize) ::= <<
<rules:{<returnScope(scope=ruleDescriptor.returnScope)>}>

# $ANTLR start <ruleName>
# <fileName>:<description>
def <ruleName>(self, <ruleDescriptor.parameterScope:parameterScope(scope=it)>):
    <if(trace)>traceIn("<ruleName>", <ruleDescriptor.index>);<endif>
    <ruleScopeSetUp()>
    <ruleDeclarations()>
    <ruleLabelDefs()>
    <ruleDescriptor.actions.init>
    <@preamble()>
    try:
        try:
            <ruleMemoization(name=ruleName)>
            <block>
            <ruleCleanUp()>
            <(ruleDescriptor.actions.after):execAction()>

<if(exceptions)>
        <exceptions:{e|<catch(decl=e.decl,action=e.action)><\n>}>
<else>
<if(!emptyRule)>
<if(actions.(actionScope).rulecatch)>
        <actions.(actionScope).rulecatch>
<else>
        except antlr3.RecognitionException, re:
            self.reportError(re);
            self.recover(self.input, re)

<endif>
<endif>
<endif>
    finally:
        <if(trace)>traceOut("<ruleName>", <ruleDescriptor.index>);<endif>
        <memoize()>
        <ruleScopeCleanUp()>
        <finally>
        pass

    <@postamble()>
    return <ruleReturnValue()>

# $ANTLR end <ruleName>
>>

catch(decl,action) ::= <<
except <e.decl>:
    <e.action>

>>

ruleDeclarations() ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
raise NotImplementedError("ruleDeclarations: hasMultipleReturnValues")
<returnType()> retval = new <returnType()>();
retval.start = input.LT(1);<\n>
<else>
<ruleDescriptor.returnScope.attributes:{ a |
<a.name> = <if(a.initValue)><a.initValue><else><initValue(a.type)><endif>
}>
<endif>
<if(memoize)>
raise NotImplementedError("ruleDeclarations: memoize")
int <ruleDescriptor.name>_StartIndex = input.index();
<endif>
>>

ruleScopeSetUp() ::= <<
<ruleDescriptor.useScopes:{self.<it>_stack.append(<it>_scope())}; separator="\n">
<ruleDescriptor.ruleScope:{self.<it.name>_stack.append(<it.name>_scope())}; separator="\n">
>>

ruleScopeCleanUp() ::= <<
<ruleDescriptor.useScopes:{self.<it>_stack.pop()}; separator="\n">
<ruleDescriptor.ruleScope:{self.<it.name>_stack.pop()}; separator="\n">
>>

ruleLabelDefs() ::= <<
<[ruleDescriptor.tokenLabels,ruleDescriptor.tokenListLabels]
    :{<it.label.text> = None}; separator="\n"
>
<[ruleDescriptor.tokenListLabels,ruleDescriptor.ruleListLabels]
    :{2-List list_<it.label.text>=null;}; separator="\n"
>
<[ruleDescriptor.ruleLabels,ruleDescriptor.ruleListLabels]
    :ruleLabelDef(label=it); separator="\n"
>
<[ruleDescriptor.allRuleRefsInAltsWithRewrites,ruleDescriptor.allTokenRefsInAltsWithRewrites]
    :{3-List list_<it>=new ArrayList();}; separator="\n"
>
>>

ruleReturnValue() ::= <<
<if(!ruleDescriptor.isSynPred)>
<if(ruleDescriptor.hasReturnValue)>
<if(ruleDescriptor.hasSingleReturnValue)>
<ruleDescriptor.singleValueReturnName>
<else>
retval
<endif>
<endif>
<endif>
>>

ruleCleanUp() ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
raise NotImplementedError("ruleCleanUp: hasMultipleReturnValues")
<if(!TREE_PARSER)>
retval.stop = input.LT(-1);<\n>
<endif>
<endif>
>>

memoize() ::= <<
<if(memoize)>
raise NotImplementedError("ruleCleanUp: memoize")
<if(backtracking)>
raise NotImplementedError("ruleCleanUp: backtracking")
if ( backtracking>0 ) { memoize(input, <ruleDescriptor.index>, <ruleDescriptor.name>_StartIndex); }
<endif>
<endif>
>>

/** How to generate a rule in the lexer; naked blocks are used for
 *  fragment rules.
 */
lexerRule(ruleName,nakedBlock,ruleDescriptor,block,memoize) ::= <<
# $ANTLR start <ruleName>
def m<ruleName>(self, <ruleDescriptor.parameterScope:parameterScope(scope=it)>):
    <if(trace)>traceIn("<ruleName>", <ruleDescriptor.index>);<endif>
    <ruleDeclarations()>
    try:
        self.ruleNestingLevel += 1

<if(nakedBlock)>
        <ruleDescriptor.actions.init>
        <ruleMemoization(name=ruleName)>
        <block><\n>
<else>
        _type = <ruleName>
        _start = self.getCharIndex()
        _line = self.getLine()
        _charPosition = self.getCharPositionInLine()
        _channel = antlr3.DEFAULT_CHANNEL

        <ruleDescriptor.actions.init>
        <ruleMemoization(name=ruleName)>
        <block>
        <! create token if none exists *and* we are an outermost token rule !>
        <execAction({
if self.token is None and self.ruleNestingLevel == 1:
    self.emit(
        _type, _line, _charPosition, 
        _channel, 
        _start, self.getCharIndex()-1
    )
})>
        <ruleCleanUp()>
        <(ruleDescriptor.actions.after):execAction()>
<endif>

    finally:
        self.ruleNestingLevel -= 1
        <if(trace)>traceOut("<ruleName>", <ruleDescriptor.index>);<endif>
	<memoize()>

# $ANTLR end <ruleName>


>>

/** How to generate code for the implicitly-defined lexer grammar rule
 *  that chooses between lexer rules.
 */
tokensRule(ruleName,nakedBlock,args,block,ruleDescriptor) ::= <<
def mTokens(self):
    <block><\n>


>>

// S U B R U L E S

/** A (...) subrule with multiple alternatives */
block(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
# <fileName>:<description>
alt<decisionNumber> = <maxAlt>
<decls>
<@predecision()>
<decision>
<@postdecision()>
<@prebranch()>
<alts:altSwitchCase(); separator="\nel">
<@postbranch()>
>>

/** A rule block with multiple alternatives */
ruleBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
# <fileName>:<description>
alt<decisionNumber> = <maxAlt>
<decls>
<@predecision()>
<decision>
<@postdecision()>
<alts:altSwitchCase(); separator="\nel">
>>

ruleBlockSingleAlt(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,description) ::= <<
# <fileName>:<description>
<decls>
<@prealt()>
<alts>
<@postalt()>
>>

/** A special case of a (...) subrule with a single alternative */
blockSingleAlt(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,description) ::= <<
# <fileName>:<description>
<decls>
<@prealt()>
<alts>
<@postalt()>
>>

/** A (..)+ block with 1 or more alternatives */
positiveClosureBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
# <fileName>:<description>
cnt<decisionNumber> = 0
<decls>
<@preloop()>
#loop<decisionNumber>:
while True:
    alt<decisionNumber> = <maxAlt>
    <@predecision()>
    <decision>
    <@postdecision()>
    <alts:altSwitchCase(); separator="\nel">
    else:
        if cnt<decisionNumber> >= 1:
            # FIXME: could this be nested?
            break #loop<decisionNumber>

        <ruleBacktrackFailure()>
        eee = antlr3.EarlyExitException(<decisionNumber>, self.input)
        <@earlyExitException()>
        raise eee

    cnt<decisionNumber> += 1

<@postloop()>
>>

positiveClosureBlockSingleAlt ::= positiveClosureBlock

/** A (..)* block with 1 or more alternatives */
closureBlock(alts,decls,decision,enclosingBlockLevel,blockLevel,decisionNumber,maxK,maxAlt,description) ::= <<
# <fileName>:<description>
<decls>
<@preloop()>
#loop<decisionNumber>:
while True:
    alt<decisionNumber> = <maxAlt>
    <@predecision()>
    <decision>
    <@postdecision()>
    <alts:altSwitchCase(); separator="\nel">
    else:
        # FIXME: could this be nested?
        break #loop<decisionNumber>

<@postloop()>
>>

closureBlockSingleAlt ::= closureBlock

/** Optional blocks (x)? are translated to (x|) by before code generation
 *  so we can just use the normal block template
 */
optionalBlock ::= block

optionalBlockSingleAlt ::= block

/** A case in a switch that jumps to an alternative given the alternative
 *  number.  A DFA predicts the alternative and then a simple switch
 *  does the jump to the code that actually matches that alternative.
 */
altSwitchCase() ::= <<
if alt<decisionNumber> == <i>:
    <@prealt()>
    <it>
>>

/** An alternative is just a list of elements; at outermost level */
alt(elements,altNum,description,autoAST,outerAlt) ::= <<
# <fileName>:<description>
<@declarations()>
<elements:element()>
<@cleanup()>
>>

// E L E M E N T S

/** Dump the elements one per line */
element() ::= <<
<@prematch()>
<it.el><\n>
>>

/** match a token optionally with a label in front */
tokenRef(token,label,elementIndex) ::= <<
<if(label)>
<label> = self.input.LT(1)<\n>
<endif>
self.match(self.input, <token>, self.FOLLOW_<token>_in_<ruleName><elementIndex>)
<checkRuleBacktrackFailure()>
>>

/** ids+=ID */
tokenRefAndListLabel(token,label,elementIndex) ::= <<
raise NotImplementedError("tokenRefAndListLabel")
>>
//<tokenRef(...)>
//<listLabel(...)>
//>>

listLabel(label, elem) ::= <<
raise NotImplementedError("listLabel")
>>
//if (list_<label>==null) list_<label>=new ArrayList();
//list_<label>.add(<label>);<\n>
//>>

/** match a character */
charRef(char,label) ::= <<
<if(label)>
raise NotImplementedError("charRef: label")
int <label> = input.LA(1);<\n>
<endif>
self.match(<char>)
<checkRuleBacktrackFailure()>
>>

/** match a character range */
charRangeRef(a,b) ::= <<
self.matchRange(<a>, <b>)
<checkRuleBacktrackFailure()>
>>

/** For now, sets are interval tests and must be tested inline */
matchSet(s,label,elementIndex,postmatchCode="") ::= <<
<if(label)>
raise NotImplementedError("matchSet: label")
#<label>=(<labelType>)input.LT(1);<\n>
<endif>
if <s>:
    <postmatchCode>
    self.input.consume();
<if(!LEXER)>
    self.errorRecovery = False
<endif>
<if(backtracking)>
    self.failed = False
<endif>

else:
    <ruleBacktrackFailure()>
    mse = antlr3.MismatchedSetException(None, self.input)
    <@mismatchedSetException()>
<if(LEXER)>
    self.recover(mse)<\n>
<else>
    self.recoverFromMismatchedSet(
        self.input, mse, FOLLOW_set_in_<ruleName><elementIndex>
        )<\n>
<endif>
    raise mse
<\n>
>>

matchSetAndListLabel(s,label,elementIndex,postmatchCode) ::= <<
raise NotImplementedError("matchSetAndListLabel")
>>
//<matchSet(...)>
//<listLabel(...)>
//>>

/** Match a string literal */
lexerStringRef(string,label) ::= <<
<if(label)>
raise NotImplementedError("lexerStringRef: label")
int <label>Start = getCharIndex();
match(<string>); <checkRuleBacktrackFailure()>
<labelType> <label> = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, <label>Start, getCharIndex()-1);
<else>
self.match(<string>)
<checkRuleBacktrackFailure()><\n>
<endif>
>>

wildcard(label,elementIndex) ::= <<
<if(label)>
raise NotImplementedError("wildcard: label")
#<label>=(<labelType>)input.LT(1);<\n>
<endif>
self.matchAny(self.input)
<checkRuleBacktrackFailure()>
>>

wildcardAndListLabel(label,elementIndex) ::= <<
raise NotImplementedError("wildcardAndListLabel")
>>
//<wildcard(...)>
//<listLabel(...)>
//>>

/** Match . wildcard in lexer */
wildcardChar(label, elementIndex) ::= <<
<if(label)>
raise NotImplementedError("wildcardChar: label")
#int <label> = input.LA(1);<\n>
<endif>
self.matchAny()
<checkRuleBacktrackFailure()>
>>

wildcardCharListLabel(label, elementIndex) ::= <<
raise NotImplementedError("wildcardCharListLabel")
>>
//<wildcardChar(...)>
//<listLabel(...)>
//>>

/** Match a rule reference by invoking it possibly with arguments
 *  and a return value or values.
 */
ruleRef(rule,label,elementIndex,args) ::= <<
self.following.append(self.FOLLOW_<rule>_in_<ruleName><elementIndex>)
<if(label)>
<label> = self.<rule>(<args; separator=", ">)<\n>
<else>
self.<rule>(<args; separator=", ">)<\n>
<endif>
self.following.pop()
<checkRuleBacktrackFailure()>
>>

/** ids+=ID */
ruleRefAndListLabel(rule,label,elementIndex,args) ::= <<
raise NotImplementedError("ruleRefAndListLabel")
>>
//<ruleRef(...)>
//<listLabel(...)>
//>>

/** A lexer rule reference */
lexerRuleRef(rule,label,args) ::= <<
<if(label)>
<label>Start = self.getCharIndex()
self.m<rule>(<args; separator=", ">)
<checkRuleBacktrackFailure()>
<label> = antlr3.CommonToken(
    input=self.input, 
    type=antlr3.INVALID_TOKEN_TYPE,
    channel=antlr3.DEFAULT_CHANNEL,
    start=<label>Start,
    stop=self.getCharIndex()-1
    )
<else>
self.m<rule>(<args; separator=", ">)
<checkRuleBacktrackFailure()>
<endif>
>>

/** EOF in the lexer */
lexerMatchEOF(label) ::= <<
<if(label)>
raise NotImplementedError("lexerMatchEOF: label")
#int <label>Start = getCharIndex();
#match(EOF); <checkRuleBacktrackFailure()>
#<labelType> <label> = new CommonToken(input, EOF, Token.DEFAULT_CHANNEL, <label>Start, getCharIndex()-1);
<else>
self.match(EOF)
<checkRuleBacktrackFailure()>
<endif>
>>

/** match ^(root children) in tree parser */
tree(root, children, nullableChildList) ::= <<
raise NotImplementedError("tree")
>>
//<root:element()>
//<if(nullableChildList)>
//if ( input.LA(1)==Token.DOWN ) {
//    match(input, Token.DOWN, null); <checkRuleBacktrackFailure()>
//    <children:element()>
//    match(input, Token.UP, null); <checkRuleBacktrackFailure()>
//}
//<else>
//match(input, Token.DOWN, null); <checkRuleBacktrackFailure()>
//<children:element()>
//match(input, Token.UP, null); <checkRuleBacktrackFailure()>
//<endif>
//>>

/** Every predicate is used as a validating predicate (even when it is
 *  also hoisted into a prediction expression).
 */
validateSemanticPredicate(pred,description) ::= <<
if not (<evalPredicate(...)>):
    <ruleBacktrackFailure()>
    raise antlr3.FailedPredicateException(self.input, "<ruleName>", "<description>")

>>

// F i x e d  D F A  (if-then-else)

dfaState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(!semPredState)>
LA<decisionNumber>_<stateNumber> = self.input.LA(<k>)<\n>
<endif>
<edges; separator="\nel">
else:
<if(eotPredictsAlt)>
    alt<decisionNumber> = <eotPredictsAlt>
<else>
    <ruleBacktrackFailure()>
    nvae = antlr3.NoViableAltException("<description>", <decisionNumber>, <stateNumber>, self.input)<\n>
    <@noViableAltException()>
    raise nvae<\n>
<endif>
>>

/** Same as a normal DFA state except that we don't examine lookahead
 *  for the bypass alternative.  It delays error detection but this
 *  is faster, smaller, and more what people expect.  For (X)? people
 *  expect "if ( LA(1)==X ) match(X);" and that's it.
 */
dfaOptionalBlockState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(!semPredState)>
LA<decisionNumber>_<stateNumber> = self.input.LA(<k>)<\n>
<endif>
<edges; separator="\nel">
>>

/** A DFA state that is actually the loopback decision of a closure
 *  loop.  If end-of-token (EOT) predicts any of the targets then it
 *  should act like a default clause (i.e., no error can be generated).
 *  This is used only in the lexer so that for ('a')* on the end of a rule
 *  anything other than 'a' predicts exiting.
 */
dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<if(!semPredState)>
LA<decisionNumber>_<stateNumber> = self.input.LA(<k>)<\n>
<endif>
<edges; separator="\nel"><\n>
<if(eotPredictsAlt)>
else:
    alt<decisionNumber> = <eotPredictsAlt>
<\n>
<endif>
>>

/** An accept state indicates a unique alternative has been predicted */
dfaAcceptState(alt) ::= "alt<decisionNumber> = <alt>"

/** A simple edge with an expression.  If the expression is satisfied,
 *  enter to the target state.  To handle gated productions, we may
 *  have to evaluate some predicates for this edge.
 */
dfaEdge(labelExpr, targetState, predicates) ::= <<
if (<labelExpr>) <if(predicates)>and (<predicates>)<endif>:
    <targetState>
>>

// F i x e d  D F A  (switch case)

/** A DFA state where a SWITCH may be generated.  The code generator
 *  decides if this is possible: CodeGenerator.canGenerateSwitch().
 */
dfaStateSwitch(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
<! 
  FIXME: this is one of the few occasion, where I miss a switch statement
  in Python. ATM this is implemented as a list of if .. elif ..
  This may be replaced by faster a dictionary lookup, when I find a solution
  for the cases when an edge is not a plain dfaAcceptState.
!>
LA<decisionNumber> = self.input.LA(<k>)
<edges; separator="\nel">
else:
<if(eotPredictsAlt)>
    alt<decisionNumber> = <eotPredictsAlt>
<else>
    <ruleBacktrackFailure()>
    nvae = antlr3.NoViableAltException("<description>", <decisionNumber>, <stateNumber>, self.input)<\n>
    <@noViableAltException()>
    raise nvae<\n>
<endif>

>>

dfaOptionalBlockStateSwitch(k,edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
LA<decisionNumber> = self.input.LA(<k>)
<edges; separator="\nel">
>>

dfaLoopbackStateSwitch(k, edges,eotPredictsAlt,description,stateNumber,semPredState) ::= <<
LA<decisionNumber> = self.input.LA(<k>)
<edges; separator="\nel">
<if(eotPredictsAlt)>
else:
    raise NotImplementedError("dfaLoopbackStateSwitch: eotPredictsAlt")
    alt<decisionNumber> = <eotPredictsAlt>
<endif>
>>

dfaEdgeSwitch(labels, targetState) ::= <<
if <labels:{LA<decisionNumber> == <it>}; separator=" or ">:
    <targetState>
>>

// C y c l i c  D F A

/** The code to initiate execution of a cyclic DFA; this is used
 *  in the rule to predict an alt just like the fixed DFA case.
 *  The <name> attribute is inherited via the parser, lexer, ...
 */
dfaDecision(decisionNumber,description) ::= <<
alt<decisionNumber> = self.dfa<decisionNumber>.predict(self.input)
>>

/* Dump DFA tables as run-length-encoded Strings of octal values.
 * Can't use hex as compiler translates them before compilation.
 * These strings are split into multiple, concatenated strings.
 * Java puts them back together at compile time thankfully.
 * Java cannot handle large static arrays, so we're stuck with this
 * encode/decode approach.  See analysis and runtime DFA for
 * the encoding methods.
 */
cyclicDFA(dfa) ::= <<
# lookup tables for DFA #<dfa.decisionNumber>

DFA<dfa.decisionNumber>_eot = [
    <dfa.eot; wrap, separator=", ", null="-1">
]

DFA<dfa.decisionNumber>_eof = [
    <dfa.eof; wrap, separator=", ", null="-1">
]

DFA<dfa.decisionNumber>_min = [
    <dfa.min; wrap, separator=", ", null="0">
]

DFA<dfa.decisionNumber>_max = [
    <dfa.max; wrap, separator=", ", null="0">
]

DFA<dfa.decisionNumber>_accept = [
    <dfa.accept; wrap, separator=", ", null="-1">
]

DFA<dfa.decisionNumber>_special = [
    <dfa.special; wrap, separator=", ", null="-1">
]

DFA<dfa.decisionNumber>_transition = [
    <dfa.transition:{s | [ <s; wrap="\n  ", separator=", ", null="-1">
  ]}; separator=",\n", null="">
]

# class definition for DFA #<dfa.decisionNumber>

<if(dfa.specialStateSTs)>
class DFA<dfa.decisionNumber>(antlr3.DFA):
    def specialStateTransition(self_, s, input):
        # pretend we are a member of the recognizer
        # thus semantic predicates can be evaluated
        self = self_.recognizer

        _s = s

        <dfa.specialStateSTs:{state |
if s == <i0>: <! compressed special state numbers 0..n-1 !>
    <state>}; separator="\nel">

<if(backtracking)>
        if self.backtracking >0:
            self.failed = True
            return -1<\n>
<endif>
        nvae = antlr3.NoViableAltException(self_.getDescription(), <dfa.decisionNumber>, _s, input)
        self_.error(nvae)
        raise nvae
<else>
DFA<dfa.decisionNumber> = antlr3.DFA
<endif>

>>

cyclicDFAInit(dfa) ::= <<
self.dfa<dfa.decisionNumber> = self.DFA<dfa.decisionNumber>(
    self, <dfa.decisionNumber>,
    eot = self.DFA<dfa.decisionNumber>_eot,
    eof = self.DFA<dfa.decisionNumber>_eof,
    min = self.DFA<dfa.decisionNumber>_min,
    max = self.DFA<dfa.decisionNumber>_max,
    accept = self.DFA<dfa.decisionNumber>_accept,
    special = self.DFA<dfa.decisionNumber>_special,
    transition = self.DFA<dfa.decisionNumber>_transition
    )<\n>
>>

/** A state in a cyclic DFA; it's a special state and part of a big switch on
 *  state.
 */
cyclicDFAState(decisionNumber,stateNumber,edges,needErrorClause,semPredState) ::= <<
<if(semPredState)>
input.rewind()<\n>
<else>
LA<decisionNumber>_<stateNumber> = self.input.LA(1)<\n>
<endif>
s = -1
<edges; separator="\nel">
if s >= 0:
    return s
>>

/** Just like a fixed DFA edge, test the lookahead and indicate what
 *  state to jump to next if successful.
 */
cyclicDFAEdge(labelExpr, targetStateNumber, edgeNumber, predicates) ::= <<
if (<labelExpr>)<if(predicates)> and (<predicates>)<endif>:
    s = <targetStateNumber><\n>
>>

/** An edge pointing at end-of-token; essentially matches any char;
 *  always jump to the target.
 */
eotDFAEdge(targetStateNumber,edgeNumber, predicates) ::= <<
raise NotImplementedError("eotDFAEdge")
>>
//s = <targetStateNumber>;<\n>
//>>


// D F A  E X P R E S S I O N S

andPredicates(left,right) ::= "FIXME(andPredicates) (<left>&&<right>)"

orPredicates(operands) ::= "FIXME(orPredicates) (<first(operands)><rest(operands):{o | ||<o>}>)"

notPredicate(pred) ::= "FIXME(notPredicate) !(<evalPredicate(...)>)"

evalPredicate(pred,description) ::= "<pred>"

evalSynPredicate(pred,description) ::= "self.<pred>()"

lookaheadTest(atom,k,atomAsInt) ::= "LA<decisionNumber>_<stateNumber> == <atom>"

/** Sometimes a lookahead test cannot assume that LA(k) is in a temp variable
 *  somewhere.  Must ask for the lookahead directly.
 */
isolatedLookaheadTest(atom,k,atomAsInt) ::= "self.input.LA(<k>) == <atom>"

lookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= <<
(LA<decisionNumber>_<stateNumber> \>= <lower> and LA<decisionNumber>_<stateNumber> \<= <upper>)
>>

isolatedLookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= "(self.input.LA(<k>) \>= <lower> and self.input.LA(<k>) \<= <upper>)"

setTest(ranges) ::= "<ranges; separator=\" or \">"

// A T T R I B U T E S

globalAttributeScopeClass(scope) ::= <<
<if(scope.attributes)>
class <scope.name>_scope(object):
    def __init__(self):
        <scope.attributes:{self.<it.decl> = None}; separator="\n">

<endif>
>>

globalAttributeScopeStack(scope) ::= <<
<if(scope.attributes)>
self.<scope.name>_stack = []<\n>
<endif>
>>

ruleAttributeScopeClass(scope) ::= <<
<if(scope.attributes)>
class <scope.name>_scope(object):
    def __init__(self):
        <scope.attributes:{self.<it.decl> = None}; separator="\n">
<endif>
>>

ruleAttributeScopeStack(scope) ::= <<
<if(scope.attributes)>
self.<scope.name>_stack = []<\n>
<endif>
>>

returnType() ::= <<
raise NotImplementedError("returnType")
>>
//<if(ruleDescriptor.hasMultipleReturnValues)>
//<ruleDescriptor.name>_return
//<else>
//<if(ruleDescriptor.hasSingleReturnValue)>
//<ruleDescriptor.singleValueReturnType>
//<else>
//void
//<endif>
//<endif>
//>>

/** Generate the Java type associated with a single or multiple return
 *  values.
 */
ruleLabelType(referencedRule) ::= <<
raise NotImplementedError("ruleLabelType")
>>
//<if(referencedRule.hasMultipleReturnValues)>
//<referencedRule.name>_return
//<else>
//<if(referencedRule.hasSingleReturnValue)>
//<referencedRule.singleValueReturnType>
//<else>
//void
//<endif>
//<endif>
//>>

/** Using a type to init value map, try to init a type; if not in table
 *  must be an object, default value is "null".
 */
initValue(typeName) ::= <<
None
>>

/** Define a rule label including default value */
ruleLabelDef(label) ::= <<
<label.label.text> = <initValue(typeName=ruleLabelType(referencedRule=label.referencedRule))><\n>
>>

/** Define a return struct for a rule if the code needs to access its
 *  start/stop tokens, tree stuff, attributes, ...  Leave a hole for
 *  subgroups to stick in members.
 */
returnScope(scope) ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
raise NotImplementedError("returnScope: ruleDescriptor.hasMultipleReturnValues")
<!
public static class <returnType()> extends <if(TREE_PARSER)>Tree<else>Parser<endif>RuleReturnScope {
    <scope.attributes:{public <it.decl>;}; separator="\n">
    <@ruleReturnMembers()>
};
!>
<endif>
>>

parameterScope(scope) ::= <<
raise NotImplementedError("parameterScope")
>>
//<scope.attributes:{<it.decl>}; separator=", ">
//>>

parameterAttributeRef(attr) ::= "FIXME(parameterAttributeRef) <attr.name>"
parameterSetAttributeRef(attr,expr) ::= "FIXME(parameterSetAttributeRef) <attr.name> =<expr>;"

scopeAttributeRef(scope,attr,index,negIndex) ::= <<
<if(negIndex)>
raise NotImplementedError("scopeAttributeRef: negIndex")
#((<scope>_scope)<scope>_stack.elementAt(<scope>_stack.size()-<negIndex>-1)).<attr.name>
<else>
<if(index)>
raise NotImplementedError("scopeAttributeRef: index")
#((<scope>_scope)<scope>_stack.elementAt(<index>)).<attr.name>
<else>
self.<scope>_stack[-1].<attr.name>
<endif>
<endif>
>>

scopeSetAttributeRef(scope,attr,expr,index,negIndex) ::= <<
<if(negIndex)>
raise NotImplementedError("scopeSetAttributeRef: negIndex")
#((<scope>_scope)<scope>_stack.elementAt(<scope>_stack.size()-<negIndex>-1)).<attr.name> =<expr>;
<else>
<if(index)>
raise NotImplementedError("scopeSetAttributeRef: index")
#((<scope>_scope)<scope>_stack.elementAt(<index>)).<attr.name> =<expr>;
<else>
self.<scope>_stack[-1].<attr.name> = <expr>
<endif>
<endif>
>>

/** $x is either global scope or x is rule with dynamic scope; refers
 *  to stack itself not top of stack.  This is useful for predicates
 *  like {$function.size()>0 && $function::name.equals("foo")}?
 */
isolatedDynamicScopeRef(scope) ::= "FIXME(isolatedDynamicScopeRef) <scope>_stack"

/** reference an attribute of rule; might only have single return value */
ruleLabelRef(referencedRule,scope,attr) ::= <<
<if(referencedRule.hasMultipleReturnValues)>
<scope>.<attr.name>
<else>
<scope>
<endif>
>>

returnAttributeRef(ruleDescriptor,attr) ::= <<
<if(ruleDescriptor.hasMultipleReturnValues)>
retval.<attr.name>
<else>
<attr.name>
<endif>
>>

returnSetAttributeRef(ruleDescriptor,attr,expr) ::= <<
raise NotImplementedError("returnSetAttributeRef")
>>
//<if(ruleDescriptor.hasMultipleReturnValues)>
//retval.<attr.name> =<expr>;
//<else>
//<attr.name> =<expr>;
//<endif>
//>>

/** How to translate $tokenLabel */
tokenLabelRef(label) ::= "<label>"

/** ids+=ID {$ids} or e+=expr {$e} */
listLabelRef(label) ::= "FIXME(listLabelRef) list_<label>"


// not sure the next are the right approach; and they are evaluated early;
// they cannot see TREE_PARSER or PARSER attributes for example. :(

tokenLabelPropertyRef_text(scope,attr) ::= "<scope>.text"
tokenLabelPropertyRef_type(scope,attr) ::= "FIXME(tokenLabelPropertyRef_type) <scope>.getType()"
tokenLabelPropertyRef_line(scope,attr) ::= "FIXME(tokenLabelPropertyRef_line) <scope>.getLine()"
tokenLabelPropertyRef_pos(scope,attr) ::= "FIXME(tokenLabelPropertyRef_pos) <scope>.getCharPositionInLine()"
tokenLabelPropertyRef_channel(scope,attr) ::= "FIXME(tokenLabelPropertyRef_channel) <scope>.getChannel()"
tokenLabelPropertyRef_index(scope,attr) ::= "FIXME(tokenLabelPropertyRef_index) <scope>.getTokenIndex()"
tokenLabelPropertyRef_tree(scope,attr) ::= "FIXME(tokenLabelPropertyRef_tree) <scope>_tree"

ruleLabelPropertyRef_start(scope,attr) ::= "FIXME(ruleLabelPropertyRef_start) ((<labelType>)<scope>.start)"
ruleLabelPropertyRef_stop(scope,attr) ::= "FIXME(ruleLabelPropertyRef_stop) ((<labelType>)<scope>.stop)"
ruleLabelPropertyRef_tree(scope,attr) ::= "FIXME(ruleLabelPropertyRef_tree) ((<ASTLabelType>)<scope>.tree)"
ruleLabelPropertyRef_text(scope,attr) ::= "FIXME(ruleLabelPropertyRef_text) input.toString(<scope>.start,<scope>.stop)"
ruleLabelPropertyRef_st(scope,attr) ::= "FIXME(ruleLabelPropertyRef_st) <scope>.st"

/** Isolated $RULE ref ok in lexer as it's a Token */
lexerRuleLabel(label) ::= "FIXME(lexerRuleLabel) <label>"

lexerRuleLabelPropertyRef_type(scope,attr) ::= "FIXME(lexerRuleLabelPropertyRef_type) <scope>.getType()"
lexerRuleLabelPropertyRef_line(scope,attr) ::= "FIXME(lexerRuleLabelPropertyRef_line) <scope>.getLine()"
lexerRuleLabelPropertyRef_pos(scope,attr) ::= "FIXME(lexerRuleLabelPropertyRef_pos) <scope>.getCharPositionInLine()"
lexerRuleLabelPropertyRef_channel(scope,attr) ::= "FIXME(lexerRuleLabelPropertyRef_channel) <scope>.getChannel()"
lexerRuleLabelPropertyRef_index(scope,attr) ::= "FIXME(lexerRuleLabelPropertyRef_index) <scope>.getTokenIndex()"
lexerRuleLabelPropertyRef_text(scope,attr) ::= "FIXME(lexerRuleLabelPropertyRef_text) <scope>.getText()"

// Somebody may ref $template or $tree or $stop within a rule:
rulePropertyRef_start(scope,attr) ::= "FIXME(rulePropertyRef_start) ((<labelType>)retval.start)"
rulePropertyRef_stop(scope,attr) ::= "FIXME(rulePropertyRef_stop) ((<labelType>)retval.stop)"
rulePropertyRef_tree(scope,attr) ::= "FIXME(rulePropertyRef_tree) ((<ASTLabelType>)retval.tree)"
rulePropertyRef_text(scope,attr) ::= "FIXME(rulePropertyRef_text) input.toString(retval.start,input.LT(-1))"
rulePropertyRef_st(scope,attr) ::= "FIXME(rulePropertyRef_st) retval.st"

lexerRulePropertyRef_text(scope,attr) ::= "self.getText()"
lexerRulePropertyRef_type(scope,attr) ::= "_type"
lexerRulePropertyRef_line(scope,attr) ::= "_line"
lexerRulePropertyRef_pos(scope,attr) ::= "_charPosition"
lexerRulePropertyRef_index(scope,attr) ::= "-1" // undefined token index in lexer
lexerRulePropertyRef_channel(scope,attr) ::= "_channel"
lexerRulePropertyRef_start(scope,attr) ::= "_start"
lexerRulePropertyRef_stop(scope,attr) ::= "(self.getCharIndex()-1)"

// setting $st and $tree is allowed in local rule. everything else
// is flagged as error
ruleSetPropertyRef_tree(scope,attr,expr) ::= "FIXME(ruleSetPropertyRef_tree) retval.tree =<expr>;"
ruleSetPropertyRef_st(scope,attr,expr) ::= "FIXME(ruleSetPropertyRef_st) retval.st =<expr>;"


/** How to execute an action */
execAction(action) ::= <<
<if(backtracking)>
<if(actions.(actionScope).synpredgate)>
if <actions.(actionScope).synpredgate>:
    <action>

<else>
if self.backtracking == 0:
    <action>

<endif>
<else>
#action start
<action>
#action end
<endif>
>>

// M I S C (properties, etc...)

codeFileExtension() ::= ".py"

true() ::= "True"
false() ::= "False"
