group en_US;

// TOOL ERRORS
// file errors
CANNOT_WRITE_FILE(arg,exception) ::= "cannot write file <arg>: <exception>"
CANNOT_CLOSE_FILE(arg,exception) ::= "cannot close file <arg>: <exception>"
CANNOT_FIND_TOKENS_FILE(arg) ::= "cannot find tokens file <arg>"
ERROR_READING_TOKENS_FILE(arg,exception) ::= 
	"problem reading token vocabulary file <arg>: <exception>"

INTERNAL_ERROR(arg,exception) ::= <<
internal error: <arg><if(exception)>: <exception><endif>
>>
INTERNAL_WARNING(arg) ::= "internal warning: <arg>"
ERROR_CREATING_ARTIFICIAL_RULE(exception) ::=
	"problems creating lexer rule listing all tokens: <exception>"
TOKENS_FILE_SYNTAX_ERROR(arg,arg2) ::= 
	"problems parsing token vocabulary file <arg> on line <arg2>"
CANNOT_GEN_DOT_FILE(arg,exception) ::= 
	"cannot write DFA DOT file <arg>: <exception>"
BAD_ACTION_AST_STRUCTURE(exception) ::=
	"bad internal tree structure for action '<arg>': <exception>"
BAD_AST_STRUCTURE(arg,exception) ::=
	"bad internal tree structure '<arg>': <exception>"

// code gen errors
MISSING_CODE_GEN_TEMPLATES(arg) ::= 
	"cannot find code generation templates for language <arg>"
MISSING_CYCLIC_DFA_CODE_GEN_TEMPLATES() ::=
	"cannot find code generation cyclic DFA templates for language <arg>"
CODE_GEN_TEMPLATES_INCOMPLETE() ::= 
	"at least one code generation template missing for language <arg>"
CANNOT_CREATE_TARGET_GENERATOR(arg,exception) ::= 
	"cannot create target <arg> code generator: <exception>"
CANNOT_COMPUTE_SAMPLE_INPUT_SEQ() ::= 
	"cannot generate a sample input sequence from lookahead DFA"

// grammar interpretation errors
NO_VIABLE_DFA_ALT(arg,arg2) ::=
	"no viable transition from state <arg> on <arg2> while interpreting DFA"

// bytecode problems
BYTECODE_UNKNOWN_INSTR(arg) ::= "unknown instruction '<arg>'"
BYTECODE_CANNOT_HANDLE_ILOAD_ISTORE_OPND(arg) ::= 
	"can't handle general iload/istore operand '<arg>'"
BYTECODE_CANNOT_HANDLE_ALOAD_OPND(arg) ::= 
	"can't handle general aload operand '<arg>'"
BYTECODE_CANNOT_HANDLE_LDC_OPND(arg) ::= 
	"can't handle general ldc operand '<arg>'"
BYTECODE_DUP_LABEL(arg) ::= "duplicate label ignored: '<arg>'"
BYTECODE_UNDEFINED_LABEL(arg) ::= "undefined label: '<arg>'"
BYTECODE_OPND_MISSING_QUOTE(arg) ::= "missing operand quote: '<arg>'"
BYTECODE_MISSING_METHOD(arg) ::= "missing .method instruction"
BYTECODE_MISSING_METHOD_NAME(arg) ::= "missing .method name"
BYTECODE_MISSING_METHOD_SIG(arg) ::= "missing .method signature"
BYTECODE_MISSING_METHOD_MAXSTACK(arg) ::= "missing .method maxstack value"
BYTECODE_MISSING_METHOD_MAXLOCALS(arg) ::= "missing .method locals value"

// GRAMMAR ERRORS
SYNTAX_ERROR() ::= "syntax error"
RULE_REDEFINITION(file,line,col,arg) ::= 
	"<loc()>rule <arg> redefinition"
LEXER_RULES_NOT_ALLOWED(arg) ::= 
	"<loc()>lexer rule <arg> not allowed in parser"
PARSER_RULES_NOT_ALLOWED(arg) ::= 
	"<loc()>parser rule <arg> not allowed in lexer"
CANNOT_FIND_ATTRIBUTE_NAME_IN_DECL(arg) ::=
	"cannot find an attribute name in attribute declaration"
NO_TOKEN_DEFINITION(file,line,col,arg) ::= 
	"<loc()>no lexer rule corresponding to token: <arg>"
UNDEFINED_RULE_REF(file,line,col,arg) ::= 
	"<loc()>reference to undefined rule: <arg>"

// GRAMMAR WARNINGS
GRAMMAR_AMBIGUITY() ::= "grammar ambig"

/* This factors out file location formatting; file,line,col inherited from
 * enclosing template; don't manually pass stuff in.
 */
loc() ::= "<file>:<line>:<col>: "
