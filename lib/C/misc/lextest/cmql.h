/** \file
 *  This C header file was generated by $ANTLR version 3.0b4
 *
 *     -  From the grammar source file : c:\\antlrsrc\\code\\antlr\\main\\lib\\C\\misc\\lextest\\cmql.g
 *     -                            On : 2006-08-18 16:05:51
 *     -                for the parser : cmqlParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim "Any relation to Eric?" Idle - "jimi" at idledotws
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The parser cmqlhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pcmql, which is returned from a call to cmqlNew().
 *
 * The entry points for cmql are  as follows:
 *
 *  - query_return      pcmql->query(pcmql)
 *  - index_spec_return      pcmql->index_spec(pcmql)
 *  - indexes_return      pcmql->indexes(pcmql)
 *  - index_name_return      pcmql->index_name(pcmql)
 *  - index_type_return      pcmql->index_type(pcmql)
 *  - index_storage_return      pcmql->index_storage(pcmql)
 *  - index_elements_return      pcmql->index_elements(pcmql)
 *  - index_entry_return      pcmql->index_entry(pcmql)
 *  - index_nodes_return      pcmql->index_nodes(pcmql)
 *  - node_entry_return      pcmql->node_entry(pcmql)
 *  - node_collation_return      pcmql->node_collation(pcmql)
 *  - dictionary_spec_return      pcmql->dictionary_spec(pcmql)
 *  - dict_elements_return      pcmql->dict_elements(pcmql)
 *  - dict_entry_return      pcmql->dict_entry(pcmql)
 *  - dict_assoc_return      pcmql->dict_assoc(pcmql)
 *  - dict_name_return      pcmql->dict_name(pcmql)
 *  - dict_heading_return      pcmql->dict_heading(pcmql)
 *  - dict_attrno_return      pcmql->dict_attrno(pcmql)
 *  - dict_reference_return      pcmql->dict_reference(pcmql)
 *  - dict_mv_indicator_return      pcmql->dict_mv_indicator(pcmql)
 *  - dict_attr8_itype_return      pcmql->dict_attr8_itype(pcmql)
 *  - dict_conv_return      pcmql->dict_conv(pcmql)
 *  - dict_just_return      pcmql->dict_just(pcmql)
 *  - dict_width_return      pcmql->dict_width(pcmql)
 *  - dict_format_return      pcmql->dict_format(pcmql)
 *  - dict_colno_return      pcmql->dict_colno(pcmql)
 *  - query_body_return      pcmql->query_body(pcmql)
 *  - querySpecs_return      pcmql->querySpecs(pcmql)
 *  - bool_return      pcmql->bool(pcmql)
 *  - query_type_return      pcmql->query_type(pcmql)
 *  - queryLogic_return      pcmql->queryLogic(pcmql)
 *  - selectTypeLogic_return      pcmql->selectTypeLogic(pcmql)
 *  - listTypeLogic_return      pcmql->listTypeLogic(pcmql)
 *  - to_clause_return      pcmql->to_clause(pcmql)
 *  - connective_return      pcmql->connective(pcmql)
 *  - common_connectives_return      pcmql->common_connectives(pcmql)
 *  - integerparam_return      pcmql->integerparam(pcmql)
 *  - saving_clause_return      pcmql->saving_clause(pcmql)
 *  - itemid_clause_return      pcmql->itemid_clause(pcmql)
 *  - idselectExp_return      pcmql->idselectExp(pcmql)
 *  - idselectSubExpr_return      pcmql->idselectSubExpr(pcmql)
 *  - iselectConjuntive_return      pcmql->iselectConjuntive(pcmql)
 *  - idselect_primary_return      pcmql->idselect_primary(pcmql)
 *  - idselect_secondary_return      pcmql->idselect_secondary(pcmql)
 *  - selectExp_return      pcmql->selectExp(pcmql)
 *  - selectExpSubsequent_return      pcmql->selectExpSubsequent(pcmql)
 *  - selectTermSet_return      pcmql->selectTermSet(pcmql)
 *  - selectTerm_return      pcmql->selectTerm(pcmql)
 *  - value_selection_exp_return      pcmql->value_selection_exp(pcmql)
 *  - value_selection_primary_return      pcmql->value_selection_primary(pcmql)
 *  - withbetween1_return      pcmql->withbetween1(pcmql)
 *  - withbetween2_return      pcmql->withbetween2(pcmql)
 *  - sort_exp_return      pcmql->sort_exp(pcmql)
 *  - sortclause_return      pcmql->sortclause(pcmql)
 *  - output_spec_return      pcmql->output_spec(pcmql)
 *  - output_elements_return      pcmql->output_elements(pcmql)
 *  - dict_display_return      pcmql->dict_display(pcmql)
 *  - dict_element_return      pcmql->dict_element(pcmql)
 *  - limiter_exp_return      pcmql->limiter_exp(pcmql)
 *  - limiter_op_return      pcmql->limiter_op(pcmql)
 *  - limiter_return      pcmql->limiter(pcmql)
 *  - opt_eq_return      pcmql->opt_eq(pcmql)
 *  - baddict_return      pcmql->baddict(pcmql)
 *  - formatting_return      pcmql->formatting(pcmql)
 *  - ANTLR3_BOOLEAN      pcmql->synpred1(pcmql)
 *  - ANTLR3_BOOLEAN      pcmql->synpred2(pcmql)
 *  - ANTLR3_BOOLEAN      pcmql->synpred3(pcmql)
 *  - ANTLR3_BOOLEAN      pcmql->synpred4(pcmql)
 *  - ANTLR3_BOOLEAN      pcmql->synpred5(pcmql)
 *  - ANTLR3_BOOLEAN      pcmql->synpred6(pcmql)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_cmql_H
#define _cmql_H


/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
/** Tricky typedef state to allow dfa states in Cyclic dfas to return the address of the
 *  next dfa state that is predicted for the current dfa state, or the address
 *  of themselves if they predict an alt. :-)
 *
 * \remark
 * In case you can't read this, and I think no less of you if you cannot, 
 * this declares ANTLR3_DFASTATE to be a pointer to a
 * a function that accepts a context pointer and a pointer to the alt, and returns
 * a pointer to a function that accepts a context pointer and a pointer to int and
 * returns a pointer to void (which we then cast to ANTLR3_DFASTATE). There are other ways
 * of doing this such as cascading definitions, but this works just fine.
 *
 * Jim Idle - March 2006
 */
typedef	    void *(*(*ANTLR3_DFASTATE)(pcmql, pANTLR3_UINT32))(pcmql, pANTLR3_UINT32) ;

/* returnScope() */
typedef struct query_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    ANTLR3_BOOLEAN error;
    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    query_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_spec_return;/* end: returnScope() */
/* returnScope() */
typedef struct indexes_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    indexes_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_name_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_type_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_storage_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_storage_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_elements_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_entry_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_entry_return;/* end: returnScope() */
/* returnScope() */
typedef struct index_nodes_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    index_nodes_return;/* end: returnScope() */
/* returnScope() */
typedef struct node_entry_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    node_entry_return;/* end: returnScope() */
/* returnScope() */
typedef struct node_collation_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    node_collation_return;/* end: returnScope() */
/* returnScope() */
typedef struct dictionary_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dictionary_spec_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_elements_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_entry_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_entry_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_assoc_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_assoc_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_name_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_name_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_heading_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_heading_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_attrno_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_attrno_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_reference_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_mv_indicator_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_mv_indicator_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_attr8_itype_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_attr8_itype_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_conv_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_conv_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_just_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_just_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_width_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_width_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_format_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_format_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_colno_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_colno_return;/* end: returnScope() */
/* returnScope() */
typedef struct query_body_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    query_body_return;/* end: returnScope() */
/* returnScope() */
typedef struct querySpecs_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    querySpecs_return;/* end: returnScope() */
/* returnScope() */
typedef struct bool_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    bool_return;/* end: returnScope() */
/* returnScope() */
typedef struct query_type_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    query_type_return;/* end: returnScope() */
/* returnScope() */
typedef struct queryLogic_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    queryLogic_return;/* end: returnScope() */
/* returnScope() */
typedef struct selectTypeLogic_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    selectTypeLogic_return;/* end: returnScope() */
/* returnScope() */
typedef struct listTypeLogic_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    listTypeLogic_return;/* end: returnScope() */
/* returnScope() */
typedef struct to_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    to_clause_return;/* end: returnScope() */
/* returnScope() */
typedef struct connective_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    connective_return;/* end: returnScope() */
/* returnScope() */
typedef struct common_connectives_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    common_connectives_return;/* end: returnScope() */
/* returnScope() */
typedef struct integerparam_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    integerparam_return;/* end: returnScope() */
/* returnScope() */
typedef struct saving_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    saving_clause_return;/* end: returnScope() */
/* returnScope() */
typedef struct itemid_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    itemid_clause_return;/* end: returnScope() */
/* returnScope() */
typedef struct idselectExp_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    idselectExp_return;/* end: returnScope() */
/* returnScope() */
typedef struct idselectSubExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    idselectSubExpr_return;/* end: returnScope() */
/* returnScope() */
typedef struct iselectConjuntive_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    iselectConjuntive_return;/* end: returnScope() */
/* returnScope() */
typedef struct idselect_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    idselect_primary_return;/* end: returnScope() */
/* returnScope() */
typedef struct idselect_secondary_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    idselect_secondary_return;/* end: returnScope() */
/* returnScope() */
typedef struct selectExp_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    selectExp_return;/* end: returnScope() */
/* returnScope() */
typedef struct selectExpSubsequent_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    selectExpSubsequent_return;/* end: returnScope() */
/* returnScope() */
typedef struct selectTermSet_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    selectTermSet_return;/* end: returnScope() */
/* returnScope() */
typedef struct selectTerm_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    selectTerm_return;/* end: returnScope() */
/* returnScope() */
typedef struct value_selection_exp_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    value_selection_exp_return;/* end: returnScope() */
/* returnScope() */
typedef struct value_selection_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    value_selection_primary_return;/* end: returnScope() */
/* returnScope() */
typedef struct withbetween1_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    withbetween1_return;/* end: returnScope() */
/* returnScope() */
typedef struct withbetween2_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    withbetween2_return;/* end: returnScope() */
/* returnScope() */
typedef struct sort_exp_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    sort_exp_return;/* end: returnScope() */
/* returnScope() */
typedef struct sortclause_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    sortclause_return;/* end: returnScope() */
/* returnScope() */
typedef struct output_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    output_spec_return;/* end: returnScope() */
/* returnScope() */
typedef struct output_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    output_elements_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_display_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_display_return;/* end: returnScope() */
/* returnScope() */
typedef struct dict_element_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    dict_element_return;/* end: returnScope() */
/* returnScope() */
typedef struct limiter_exp_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    limiter_exp_return;/* end: returnScope() */
/* returnScope() */
typedef struct limiter_op_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    limiter_op_return;/* end: returnScope() */
/* returnScope() */
typedef struct limiter_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    limiter_return;/* end: returnScope() */
/* returnScope() */
typedef struct opt_eq_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    opt_eq_return;/* end: returnScope() */
/* returnScope() */
typedef struct baddict_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    baddict_return;/* end: returnScope() */
/* returnScope() */
typedef struct formatting_return_struct
{
    /** Generic return elements for ANTLR3 rules
     */

    /* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* Parser return tracks tokens
     */
    pANTLR3_COMMON_TOKEN	start;
    pANTLR3_COMMON_TOKEN	stop;/* End @returnScope.ruleReturnMembers() */   
}
    formatting_return;/* end: returnScope() */
/* returnScope() */
/* end: returnScope() */
/* returnScope() */
/* end: returnScope() */
/* returnScope() */
/* end: returnScope() */
/* returnScope() */
/* end: returnScope() */
/* returnScope() */
/* end: returnScope() */
/* returnScope() */
/* end: returnScope() */

/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the query scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_queryPush().
 */
typedef struct  query_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct query_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN isidlist;
    ANTLR3_BOOLEAN byexp;
    ANTLR3_BOOLEAN isSum;
    ANTLR3_BOOLEAN isStat;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    query_SCOPE, * pquery_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the queryLogic scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_queryLogicPush().
 */
typedef struct  queryLogic_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct queryLogic_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN firstExpression;
    ANTLR3_BOOLEAN firstIDExpression;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    queryLogic_SCOPE, * pqueryLogic_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the idselect_secondary scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_idselect_secondaryPush().
 */
typedef struct  idselect_secondary_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct idselect_secondary_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN reverseMatch;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    idselect_secondary_SCOPE, * pidselect_secondary_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the selectExp scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_selectExpPush().
 */
typedef struct  selectExp_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct selectExp_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN	isWhen;
    ANTLR3_BOOLEAN isFirst;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    selectExp_SCOPE, * pselectExp_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the selectTerm scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_selectTermPush().
 */
typedef struct  selectTerm_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct selectTerm_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN isFirst;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    selectTerm_SCOPE, * pselectTerm_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the value_selection_primary scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_value_selection_primaryPush().
 */
typedef struct  value_selection_primary_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct value_selection_primary_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN reverseMatch;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    value_selection_primary_SCOPE, * pvalue_selection_primary_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the baddict scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  cmql_baddictPush().
 */
typedef struct  baddict_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (*free)	(struct baddict_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    ANTLR3_BOOLEAN bad;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    baddict_SCOPE, * pbaddict_SCOPE;

/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pqueryStack
 */
#define pqueryPop()  ctx->pqueryStack->pop(ctx->pqueryStack)
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pqueryLogicStack
 */
#define pqueryLogicPop()  ctx->pqueryLogicStack->pop(ctx->pqueryLogicStack)
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pidselect_secondaryStack
 */
#define pidselect_secondaryPop()  ctx->pidselect_secondaryStack->pop(ctx->pidselect_secondaryStack)
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pselectExpStack
 */
#define pselectExpPop()  ctx->pselectExpStack->pop(ctx->pselectExpStack)
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pselectTermStack
 */
#define pselectTermPop()  ctx->pselectTermStack->pop(ctx->pselectTermStack)
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pvalue_selection_primaryStack
 */
#define pvalue_selection_primaryPop()  ctx->pvalue_selection_primaryStack->pop(ctx->pvalue_selection_primaryStack)
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Macro for popping the top value from a pbaddictStack
 */
#define pbaddictPop()  ctx->pbaddictStack->pop(ctx->pbaddictStack)


/** Context tracking structure for cmql
 */
typedef struct cmql_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  query stack for use by pqueryPush()
     *  and pqueryPop()
     */
    pANTLR3_STACK pqueryStack;
    pquery_SCOPE   (*pqueryPush)(struct cmql_Ctx_struct * ctx);
    pquery_SCOPE   pqueryTop;






























    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  queryLogic stack for use by pqueryLogicPush()
     *  and pqueryLogicPop()
     */
    pANTLR3_STACK pqueryLogicStack;
    pqueryLogic_SCOPE   (*pqueryLogicPush)(struct cmql_Ctx_struct * ctx);
    pqueryLogic_SCOPE   pqueryLogicTop;













    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  idselect_secondary stack for use by pidselect_secondaryPush()
     *  and pidselect_secondaryPop()
     */
    pANTLR3_STACK pidselect_secondaryStack;
    pidselect_secondary_SCOPE   (*pidselect_secondaryPush)(struct cmql_Ctx_struct * ctx);
    pidselect_secondary_SCOPE   pidselect_secondaryTop;

    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  selectExp stack for use by pselectExpPush()
     *  and pselectExpPop()
     */
    pANTLR3_STACK pselectExpStack;
    pselectExp_SCOPE   (*pselectExpPush)(struct cmql_Ctx_struct * ctx);
    pselectExp_SCOPE   pselectExpTop;



    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  selectTerm stack for use by pselectTermPush()
     *  and pselectTermPop()
     */
    pANTLR3_STACK pselectTermStack;
    pselectTerm_SCOPE   (*pselectTermPush)(struct cmql_Ctx_struct * ctx);
    pselectTerm_SCOPE   pselectTermTop;


    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  value_selection_primary stack for use by pvalue_selection_primaryPush()
     *  and pvalue_selection_primaryPop()
     */
    pANTLR3_STACK pvalue_selection_primaryStack;
    pvalue_selection_primary_SCOPE   (*pvalue_selection_primaryPush)(struct cmql_Ctx_struct * ctx);
    pvalue_selection_primary_SCOPE   pvalue_selection_primaryTop;













    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  baddict stack for use by pbaddictPush()
     *  and pbaddictPop()
     */
    pANTLR3_STACK pbaddictStack;
    pbaddict_SCOPE   (*pbaddictPush)(struct cmql_Ctx_struct * ctx);
    pbaddict_SCOPE   pbaddictTop;








    query_return (*query)	(struct cmql_Ctx_struct * ctx);
    index_spec_return (*index_spec)	(struct cmql_Ctx_struct * ctx);
    indexes_return (*indexes)	(struct cmql_Ctx_struct * ctx);
    index_name_return (*index_name)	(struct cmql_Ctx_struct * ctx);
    index_type_return (*index_type)	(struct cmql_Ctx_struct * ctx);
    index_storage_return (*index_storage)	(struct cmql_Ctx_struct * ctx);
    index_elements_return (*index_elements)	(struct cmql_Ctx_struct * ctx);
    index_entry_return (*index_entry)	(struct cmql_Ctx_struct * ctx);
    index_nodes_return (*index_nodes)	(struct cmql_Ctx_struct * ctx);
    node_entry_return (*node_entry)	(struct cmql_Ctx_struct * ctx);
    node_collation_return (*node_collation)	(struct cmql_Ctx_struct * ctx);
    dictionary_spec_return (*dictionary_spec)	(struct cmql_Ctx_struct * ctx);
    dict_elements_return (*dict_elements)	(struct cmql_Ctx_struct * ctx);
    dict_entry_return (*dict_entry)	(struct cmql_Ctx_struct * ctx);
    dict_assoc_return (*dict_assoc)	(struct cmql_Ctx_struct * ctx);
    dict_name_return (*dict_name)	(struct cmql_Ctx_struct * ctx);
    dict_heading_return (*dict_heading)	(struct cmql_Ctx_struct * ctx);
    dict_attrno_return (*dict_attrno)	(struct cmql_Ctx_struct * ctx);
    dict_reference_return (*dict_reference)	(struct cmql_Ctx_struct * ctx);
    dict_mv_indicator_return (*dict_mv_indicator)	(struct cmql_Ctx_struct * ctx);
    dict_attr8_itype_return (*dict_attr8_itype)	(struct cmql_Ctx_struct * ctx);
    dict_conv_return (*dict_conv)	(struct cmql_Ctx_struct * ctx);
    dict_just_return (*dict_just)	(struct cmql_Ctx_struct * ctx);
    dict_width_return (*dict_width)	(struct cmql_Ctx_struct * ctx);
    dict_format_return (*dict_format)	(struct cmql_Ctx_struct * ctx);
    dict_colno_return (*dict_colno)	(struct cmql_Ctx_struct * ctx);
    query_body_return (*query_body)	(struct cmql_Ctx_struct * ctx);
    querySpecs_return (*querySpecs)	(struct cmql_Ctx_struct * ctx);
    bool_return (*bool)	(struct cmql_Ctx_struct * ctx);
    query_type_return (*query_type)	(struct cmql_Ctx_struct * ctx);
    queryLogic_return (*queryLogic)	(struct cmql_Ctx_struct * ctx);
    selectTypeLogic_return (*selectTypeLogic)	(struct cmql_Ctx_struct * ctx);
    listTypeLogic_return (*listTypeLogic)	(struct cmql_Ctx_struct * ctx);
    to_clause_return (*to_clause)	(struct cmql_Ctx_struct * ctx);
    connective_return (*connective)	(struct cmql_Ctx_struct * ctx);
    common_connectives_return (*common_connectives)	(struct cmql_Ctx_struct * ctx);
    integerparam_return (*integerparam)	(struct cmql_Ctx_struct * ctx);
    saving_clause_return (*saving_clause)	(struct cmql_Ctx_struct * ctx);
    itemid_clause_return (*itemid_clause)	(struct cmql_Ctx_struct * ctx);
    idselectExp_return (*idselectExp)	(struct cmql_Ctx_struct * ctx);
    idselectSubExpr_return (*idselectSubExpr)	(struct cmql_Ctx_struct * ctx);
    iselectConjuntive_return (*iselectConjuntive)	(struct cmql_Ctx_struct * ctx);
    idselect_primary_return (*idselect_primary)	(struct cmql_Ctx_struct * ctx);
    idselect_secondary_return (*idselect_secondary)	(struct cmql_Ctx_struct * ctx);
    selectExp_return (*selectExp)	(struct cmql_Ctx_struct * ctx);
    selectExpSubsequent_return (*selectExpSubsequent)	(struct cmql_Ctx_struct * ctx);
    selectTermSet_return (*selectTermSet)	(struct cmql_Ctx_struct * ctx);
    selectTerm_return (*selectTerm)	(struct cmql_Ctx_struct * ctx);
    value_selection_exp_return (*value_selection_exp)	(struct cmql_Ctx_struct * ctx);
    value_selection_primary_return (*value_selection_primary)	(struct cmql_Ctx_struct * ctx);
    withbetween1_return (*withbetween1)	(struct cmql_Ctx_struct * ctx);
    withbetween2_return (*withbetween2)	(struct cmql_Ctx_struct * ctx);
    sort_exp_return (*sort_exp)	(struct cmql_Ctx_struct * ctx);
    sortclause_return (*sortclause)	(struct cmql_Ctx_struct * ctx);
    output_spec_return (*output_spec)	(struct cmql_Ctx_struct * ctx);
    output_elements_return (*output_elements)	(struct cmql_Ctx_struct * ctx);
    dict_display_return (*dict_display)	(struct cmql_Ctx_struct * ctx);
    dict_element_return (*dict_element)	(struct cmql_Ctx_struct * ctx);
    limiter_exp_return (*limiter_exp)	(struct cmql_Ctx_struct * ctx);
    limiter_op_return (*limiter_op)	(struct cmql_Ctx_struct * ctx);
    limiter_return (*limiter)	(struct cmql_Ctx_struct * ctx);
    opt_eq_return (*opt_eq)	(struct cmql_Ctx_struct * ctx);
    baddict_return (*baddict)	(struct cmql_Ctx_struct * ctx);
    formatting_return (*formatting)	(struct cmql_Ctx_struct * ctx);
    ANTLR3_BOOLEAN (*synpred1)	(struct cmql_Ctx_struct * ctx);
    ANTLR3_BOOLEAN (*synpred2)	(struct cmql_Ctx_struct * ctx);
    ANTLR3_BOOLEAN (*synpred3)	(struct cmql_Ctx_struct * ctx);
    ANTLR3_BOOLEAN (*synpred4)	(struct cmql_Ctx_struct * ctx);
    ANTLR3_BOOLEAN (*synpred5)	(struct cmql_Ctx_struct * ctx);
    ANTLR3_BOOLEAN (*synpred6)	(struct cmql_Ctx_struct * ctx);    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct cmql_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_TREE_ADAPTOR	adaptor;
    /* End @headerFile.members() */
}
    cmql, * pcmql;

/* Function protoypes for the parser functions that external translation units
 * may wish to call.
 */
ANTLR3_API pcmql cmqlNew         (pANTLR3_COMMON_TOKEN_STREAM     instream);
/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
 
#define COMMA      155
#define INDEX      37
#define WITHIN      166
#define ELEMENT      46
#define AS      157
#define REFNO      53
#define BTRUE      72
#define TOTAL      134
#define BY_EXP_DSND      131
#define NUMBER      66
#define COUNT_SUPP      86
#define ITYPE      57
#define BYEXP      32
#define COLLATED      48
#define SAVE      33
#define GRAND_TOTAL      90
#define OPT_LPTR      93
#define QUERY_BODY      7
#define INDEXES      34
#define ORDER      160
#define MULTI_VALUE      148
#define AND      109
#define OR_WITH      19
#define TO      82
#define ASP      23
#define ATTR      158
#define GLOBAL      64
#define AVERAGE      135
#define CONNECTIVES      10
#define STORAGE      45
#define FORMAT      61
#define LE      115
#define RPAREN      154
#define BETWEEN      117
#define VSP_OR      27
#define SELECT_TO      12
#define BY_EXP_SUB_DSND      133
#define FILENAME      63
#define BODY      80
#define KNULL      31
#define AND_WITH      18
#define NOPAGE      95
#define NOSPLIT      96
#define AT      81
#define REQUIRE_SELECT      100
#define ASP_AND      25
#define COL_SUPP      85
#define SAMPLE      103
#define ASSOC_WITH      147
#define ISNOTNULL      127
#define VSP_AND      28
#define INTERNAL      77
#define WHEN      122
#define VSP      26
#define WS      150
#define COL_HDG      146
#define STRING      40
#define EQ      39
#define LIST_SPEC      161
#define MARGIN      94
#define COL_HDR_SUPP      83
#define SAID      164
#define IIDSELECT      14
#define TRANSPORT      140
#define BY_EXP_SUB      132
#define UNLIKE      120
#define SEMI      41
#define DICT_SPEC      5
#define GE      116
#define BY_DSND      129
#define EVAL      159
#define INQUIRING      108
#define ATTRIBUTEVALUE      54
#define SORTED      70
#define OP_LT      113
#define SAMPLED      104
#define DICT_ELEMENT      6
#define NAME      38
#define AND_WHEN      21
#define BFALSE      73
#define NO_NULLS      107
#define WIDTH      60
#define UNIQUE      106
#define EACH      125
#define TYPE      42
#define REGULAR      163
#define STATEMENT      9
#define PERCENT      139
#define DICTIONARY      49
#define OR_WHEN      22
#define WITH_CLAUSE      16
#define SAVING      105
#define ASSOC      50
#define FILETYPE      65
#define QUERY      4
#define NO_INDEX      97
#define VERT      101
#define CONV      58
#define BY_EXP      130
#define TERMINAL      165
#define OR      110
#define LBRACE      35
#define ATTRNO      52
#define RBRACE      36
#define IDSTRING      111
#define COL_SPACES      84
#define BY      128
#define UQS      118
#define BITSLICE      44
#define FMT      144
#define IID      13
#define ATTR8      56
#define OPTIONS      69
#define LPAREN      153
#define COLNO      62
#define DIGIT      156
#define MV      55
#define IDLIST      74
#define SUM      78
#define INDEX_NODE      30
#define PRINTER      162
#define ENUM      136
#define FROM      102
#define ID_SUPP      92
#define MAX      137
#define SELECTLIST      71
#define ASP_OR      24
#define STAT      79
#define INDEX_ELEMENT      29
#define ONLY      98
#define JUSTIFICATION      59
#define NO      123
#define GT      114
#define NE      112
#define MIN      138
#define WITH_FACTOR      17
#define HDR_SUPP      91
#define QUOTE      152
#define DISPLAY_LIKE      145
#define HEADING      51
#define LIKE      119
#define ITEMSTREAM      75
#define WITH      121
#define BITMAP      43
#define PROCESSOR      68
#define FOOTING      89
#define DET_SUPP      88
#define WHEN_CLAUSE      20
#define BREAK_SUP      142
#define QUERY_SPECS      8
#define ESCAPE_SEQUENCE      151
#define EOF      -1
#define DBL_SPACE      87
#define NODE      47
#define ISNULL      126
#define SINGLE_VALUE      149
#define DATASTREAM      76
#define CALC      143
#define OUTPUT_SPEC      11
#define NOT      124
#define REQUIRE_INDEX      99
#define COMMAND      67
#define BREAK_ON      141
#define SELECT_FACTOR      15


/* End of token definitions for cmql
 * =============================================================================
 */
/** \} */



/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always refering to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritence and without nailing anybody to a cross for 
 * suggesting we just be nice to each other.
 */
/* Macros for accessing things in the parser
 */
 
#undef	    prsr		    
#undef	    haveAlreadyParsedRule
#undef	    theInput
#undef	    hasException
#undef	    theException
#undef	    tmatch
#undef	    tmatchAny
#undef	    followStk
#undef	    followPush
#undef	    followPop
#undef	    precover
#undef	    preportError
#undef	    LA
#undef	    LT
#undef	    exConstruct
#undef	    inputConsume
#undef	    markMyWords
#undef	    rewindInput
#undef	    perrorRecovery
#undef	    hasFailed
#undef	    failedFlag
#undef	    precoverFromMismatchedSet
#undef	    precoverFromMismatchedElement

#define	    prsr		    ctx->pParser  
#define	    haveAlreadyParsedRule(r) prsr->rec->alreadyParsedRule(prsr->me, r)
#define	    theInput()		    prsr->tstream
#define	    hasException()	    (theInput()->istream->error == ANTLR3_TRUE)
#define	    theException()	    theInput()->istream->exception
#define	    tmatch(t, fs)	    prsr->rec->match(prsr->rec, theInput()->istream, t, fs)
#define	    tmatchAny()		    prsr->rec->matchAny(prsr->rec, theInput()->istream->me)
#define	    followStk()		    prsr->rec->following
#define	    followPush(x)	    followStk()->push(followStk(), ((void *)(x)), NULL)
#define	    followPop()		    followStk()->pop(followStk())
#define	    precover()		    prsr->rec->recover(prsr->me, theInput()->istream)
#define	    preportError()	    prsr->rec->reportError(prsr)
#define	    LA(n)		    theInput()->istream->LA(theInput()->me, n)
#define	    LT(n)		    theInput()->LT(theInput()->me, n)
#define	    exConstruct()	    theInput()->istream->exConstruct(theInput()->istream)
#define	    inputConsume()	    theInput()->istream->consume(theInput()->istream->me)
#define	    markMyWords()	    theInput()->istream->mark(theInput()->istream->me)
#define	    rewindInput(m)	    theInput()->istream->rewind(theInput()->istream->me, m)
#define	    perrorRecovery()	    prsr->rec->errorRecovery
#define	    _fsp		    prsr->rec->_fsp
#define	    failedFlag		    prsr->rec->failed
#define	    hasFailed()		    (failedFlag == ANTLR3_TRUE)
#define	    backtracking	    prsr->rec->backtracking
#define	    precoverFromMismatchedSet(s)	prsr->rec->recoverFromMismatchedSet(prsr->rec, theInput()->istream, s)
#define	    precoverFromMismatchedElement(e)	prsr->rec->recoverFromMismatchedElement(prsr->rec, theInput()->istream, s)
#endif