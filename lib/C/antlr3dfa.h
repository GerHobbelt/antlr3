/** \file 
 * Defines the interface for the minimal DFA class required for ANTLR3
 * recognizers.
 *
 * Recognizers theirselves supply the actual implemenations and install the
 * pointers to their implementation methods. The DFAs will nromally be expected 
 * to be generated by antlr itself (via the code generation string templates.
 */
#ifndef	_ANTLR3_DFA_H
#define	_ANTLR3_DFA_H
#include    <antlr3defs.h>
#include    <antlr3intstream.h>

/** Interface definition for a DFA state interface (which will beling to a particular DFA
 *  at run time.
 */
typedef	struct ANTLR3_DFA_STATE_struct
{
    /** The alt state number that the DFA state is predicting at any one time.
     */
    ANTLR3_INT32	alt;

    /** Starting with the given state, predict the next alt state.
     */
    ANTLR3_UINT32	(*predict)  (void * dfa, pANTLR3_INT_STREAM input, pANTLR3_DFA_STATE state);

    /** Transition from current state to the next based on the input stream LA()
     */
    pANTLR3_DFA_STATE	(*transition)	(void * dfa, pANTLR3_INT_STREAM input);

    /** DFA states have a pointer to the DFA they belong to
     */
    pANTLR3_DFA	    dfa;

    /** DFA states also have a pointer to their implementor which would normally
     *  be their selves
     */
    void	* me;
}
    ANTLR3_DFA_STATE;

/** Interface definition for a minimal runtime DFA
 */
typedef struct ANTLR3_DFA_struct
{
    /** All DFAs have a pointer to their implementor (usually theirselves)
     *  so that their API functions are passed this pointer when called.
     */
    void    * me;

    /** Predict the next alt state starting from LA() in the input stream
     */
    ANTLR3_UINT32	(*predict)	(void * dfa, pANTLR3_INT_STREAM input);
    
    /** A function that knows how to free this DFA memory allocation
     */
    void    		(*free)		(struct ANTLR3_DFA_struct * dfa);
    
}
    ANTLR3_DFA;

#endif